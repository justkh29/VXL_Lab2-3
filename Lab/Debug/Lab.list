
Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002924  08002924  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002924  08002924  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800292c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000005c  08002988  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002988  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c6b  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d03  00000000  00000000  00029cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017146  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c982  00000000  00000000  00043f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826d4  00000000  00000000  000508f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  000d3018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028dc 	.word	0x080028dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080028dc 	.word	0x080028dc

0800014c <display7SEG>:
 */

#include "7SegLED.h"

void display7SEG(int num, uint32_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    char segNumber[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000156:	4a42      	ldr	r2, [pc, #264]	; (8000260 <display7SEG+0x114>)
 8000158:	f107 030c 	add.w	r3, r7, #12
 800015c:	ca07      	ldmia	r2, {r0, r1, r2}
 800015e:	c303      	stmia	r3!, {r0, r1}
 8000160:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 0, (segNumber[num] >> 0) & 1);
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	b299      	uxth	r1, r3
 8000166:	f107 020c 	add.w	r2, r7, #12
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4413      	add	r3, r2
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	f003 0301 	and.w	r3, r3, #1
 8000174:	b2db      	uxtb	r3, r3
 8000176:	461a      	mov	r2, r3
 8000178:	483a      	ldr	r0, [pc, #232]	; (8000264 <display7SEG+0x118>)
 800017a:	f001 fb9a 	bl	80018b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 1, (segNumber[num] >> 1) & 1);
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	b29b      	uxth	r3, r3
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	b299      	uxth	r1, r3
 8000186:	f107 020c 	add.w	r2, r7, #12
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4413      	add	r3, r2
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	085b      	lsrs	r3, r3, #1
 8000192:	b2db      	uxtb	r3, r3
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	b2db      	uxtb	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	4831      	ldr	r0, [pc, #196]	; (8000264 <display7SEG+0x118>)
 800019e:	f001 fb88 	bl	80018b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 2, (segNumber[num] >> 2) & 1);
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	b299      	uxth	r1, r3
 80001aa:	f107 020c 	add.w	r2, r7, #12
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	089b      	lsrs	r3, r3, #2
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	f003 0301 	and.w	r3, r3, #1
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	461a      	mov	r2, r3
 80001c0:	4828      	ldr	r0, [pc, #160]	; (8000264 <display7SEG+0x118>)
 80001c2:	f001 fb76 	bl	80018b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 3, (segNumber[num] >> 3) & 1);
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	00db      	lsls	r3, r3, #3
 80001cc:	b299      	uxth	r1, r3
 80001ce:	f107 020c 	add.w	r2, r7, #12
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4413      	add	r3, r2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	08db      	lsrs	r3, r3, #3
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	461a      	mov	r2, r3
 80001e4:	481f      	ldr	r0, [pc, #124]	; (8000264 <display7SEG+0x118>)
 80001e6:	f001 fb64 	bl	80018b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 4, (segNumber[num] >> 4) & 1);
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	011b      	lsls	r3, r3, #4
 80001f0:	b299      	uxth	r1, r3
 80001f2:	f107 020c 	add.w	r2, r7, #12
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	091b      	lsrs	r3, r3, #4
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	f003 0301 	and.w	r3, r3, #1
 8000204:	b2db      	uxtb	r3, r3
 8000206:	461a      	mov	r2, r3
 8000208:	4816      	ldr	r0, [pc, #88]	; (8000264 <display7SEG+0x118>)
 800020a:	f001 fb52 	bl	80018b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 5, (segNumber[num] >> 5) & 1);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b29b      	uxth	r3, r3
 8000212:	015b      	lsls	r3, r3, #5
 8000214:	b299      	uxth	r1, r3
 8000216:	f107 020c 	add.w	r2, r7, #12
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	095b      	lsrs	r3, r3, #5
 8000222:	b2db      	uxtb	r3, r3
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <display7SEG+0x118>)
 800022e:	f001 fb40 	bl	80018b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 6, (segNumber[num] >> 6) & 1);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b29b      	uxth	r3, r3
 8000236:	019b      	lsls	r3, r3, #6
 8000238:	b299      	uxth	r1, r3
 800023a:	f107 020c 	add.w	r2, r7, #12
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	099b      	lsrs	r3, r3, #6
 8000246:	b2db      	uxtb	r3, r3
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <display7SEG+0x118>)
 8000252:	f001 fb2e 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000256:	bf00      	nop
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	080028f4 	.word	0x080028f4
 8000264:	40010c00 	.word	0x40010c00

08000268 <offPin>:

void offPin()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <offPin+0x20>)
 8000274:	f001 fb1d 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <offPin+0x20>)
 8000280:	f001 fb17 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40010800 	.word	0x40010800

0800028c <display7SEG_Dual>:

void display7SEG_Dual(int num)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	int tens = num / 10;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <display7SEG_Dual+0x4c>)
 8000298:	fb82 1203 	smull	r1, r2, r2, r3
 800029c:	1092      	asrs	r2, r2, #2
 800029e:	17db      	asrs	r3, r3, #31
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	60fb      	str	r3, [r7, #12]
	int unit = num % 10;
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <display7SEG_Dual+0x4c>)
 80002a8:	fb83 1302 	smull	r1, r3, r3, r2
 80002ac:	1099      	asrs	r1, r3, #2
 80002ae:	17d3      	asrs	r3, r2, #31
 80002b0:	1ac9      	subs	r1, r1, r3
 80002b2:	460b      	mov	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	1ad3      	subs	r3, r2, r3
 80002bc:	60bb      	str	r3, [r7, #8]

	display7SEG(tens, GPIO_PIN_0);
 80002be:	2101      	movs	r1, #1
 80002c0:	68f8      	ldr	r0, [r7, #12]
 80002c2:	f7ff ff43 	bl	800014c <display7SEG>
	display7SEG(unit, GPIO_PIN_7);
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	68b8      	ldr	r0, [r7, #8]
 80002ca:	f7ff ff3f 	bl	800014c <display7SEG>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	66666667 	.word	0x66666667

080002dc <display7SEG_Auto>:

void display7SEG_Auto(int duration1, int duration2)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
	offPin();
 80002e6:	f7ff ffbf 	bl	8000268 <offPin>
	switch(seg)
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <display7SEG_Auto+0x58>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d002      	beq.n	80002f8 <display7SEG_Auto+0x1c>
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d00d      	beq.n	8000312 <display7SEG_Auto+0x36>
			display7SEG_Dual(duration2);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
			seg = 1;
			break;
	}
}
 80002f6:	e019      	b.n	800032c <display7SEG_Auto+0x50>
			display7SEG_Dual(duration1);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ffc7 	bl	800028c <display7SEG_Dual>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <display7SEG_Auto+0x5c>)
 8000306:	f001 fad4 	bl	80018b2 <HAL_GPIO_WritePin>
			seg = 2;
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <display7SEG_Auto+0x58>)
 800030c:	2202      	movs	r2, #2
 800030e:	601a      	str	r2, [r3, #0]
			break;
 8000310:	e00c      	b.n	800032c <display7SEG_Auto+0x50>
			display7SEG_Dual(duration2);
 8000312:	6838      	ldr	r0, [r7, #0]
 8000314:	f7ff ffba 	bl	800028c <display7SEG_Dual>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <display7SEG_Auto+0x5c>)
 8000320:	f001 fac7 	bl	80018b2 <HAL_GPIO_WritePin>
			seg = 1;
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <display7SEG_Auto+0x58>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
			break;
 800032a:	bf00      	nop
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000004c 	.word	0x2000004c
 8000338:	40010800 	.word	0x40010800

0800033c <isButton1Pressed>:

int TimeOutForKeyPress1 =  150;
int TimeOutForKeyPress2 =  150;
int TimeOutForKeyPress3 =  150;

int isButton1Pressed(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <isButton1Pressed+0x1c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <isButton1Pressed+0x10>
		return 1;
 8000348:	2301      	movs	r3, #1
 800034a:	e000      	b.n	800034e <isButton1Pressed+0x12>
	}
	return 0;
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000090 	.word	0x20000090

0800035c <isButton2Pressed>:

int isButton2Pressed(){
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <isButton2Pressed+0x1c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d101      	bne.n	800036c <isButton2Pressed+0x10>
	{
		return 1;
 8000368:	2301      	movs	r3, #1
 800036a:	e000      	b.n	800036e <isButton2Pressed+0x12>
	}
	return 0;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000094 	.word	0x20000094

0800037c <isButton3Pressed>:

int isButton3Pressed(){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <isButton3Pressed+0x1c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d101      	bne.n	800038c <isButton3Pressed+0x10>
	{
		return 1;
 8000388:	2301      	movs	r3, #1
 800038a:	e000      	b.n	800038e <isButton3Pressed+0x12>
	}
	return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000098 	.word	0x20000098

0800039c <isButton2LongPressed>:
		return 1;
	}
	return 0;
}

int isButton2LongPressed(){
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	if(button2_long_pressed == 1)
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <isButton2LongPressed+0x1c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d101      	bne.n	80003ac <isButton2LongPressed+0x10>
	{
		return 1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <isButton2LongPressed+0x12>
	}
	return 0;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000088 	.word	0x20000088

080003bc <isButton3LongPressed>:

int isButton3LongPressed(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	if(button3_long_pressed == 1)
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <isButton3LongPressed+0x1c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d101      	bne.n	80003cc <isButton3LongPressed+0x10>
	{
		return 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	e000      	b.n	80003ce <isButton3LongPressed+0x12>
	}
	return 0;
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000008c 	.word	0x2000008c

080003dc <subKeyProcess>:

void subKeyProcess(int button)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	switch (button)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	d011      	beq.n	800040e <subKeyProcess+0x32>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	dc12      	bgt.n	8000416 <subKeyProcess+0x3a>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d003      	beq.n	80003fe <subKeyProcess+0x22>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d004      	beq.n	8000406 <subKeyProcess+0x2a>
			break;
		case 3:
			button3_flag = 1;
			break;
	}
}
 80003fc:	e00b      	b.n	8000416 <subKeyProcess+0x3a>
			button1_flag = 1;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <subKeyProcess+0x44>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]
			break;
 8000404:	e007      	b.n	8000416 <subKeyProcess+0x3a>
			button2_flag = 1;
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <subKeyProcess+0x48>)
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
			break;
 800040c:	e003      	b.n	8000416 <subKeyProcess+0x3a>
			button3_flag = 1;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <subKeyProcess+0x4c>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
			break;
 8000414:	bf00      	nop
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000090 	.word	0x20000090
 8000424:	20000094 	.word	0x20000094
 8000428:	20000098 	.word	0x20000098

0800042c <subLongKeyProcess>:

void subLongKeyProcess(int button) {
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    // Handle button long press here
    switch (button)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d011      	beq.n	800045e <subLongKeyProcess+0x32>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b03      	cmp	r3, #3
 800043e:	dc12      	bgt.n	8000466 <subLongKeyProcess+0x3a>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <subLongKeyProcess+0x22>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d004      	beq.n	8000456 <subLongKeyProcess+0x2a>
        case 3:
        	button3_long_pressed = 1;
            // Handle long press for button 3 if needed
            break;
    }
}
 800044c:	e00b      	b.n	8000466 <subLongKeyProcess+0x3a>
            button1_long_pressed = 1;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <subLongKeyProcess+0x44>)
 8000450:	2201      	movs	r2, #1
 8000452:	601a      	str	r2, [r3, #0]
            break;
 8000454:	e007      	b.n	8000466 <subLongKeyProcess+0x3a>
        	button2_long_pressed = 1;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <subLongKeyProcess+0x48>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
            break;
 800045c:	e003      	b.n	8000466 <subLongKeyProcess+0x3a>
        	button3_long_pressed = 1;
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <subLongKeyProcess+0x4c>)
 8000460:	2201      	movs	r2, #1
 8000462:	601a      	str	r2, [r3, #0]
            break;
 8000464:	bf00      	nop
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000084 	.word	0x20000084
 8000474:	20000088 	.word	0x20000088
 8000478:	2000008c 	.word	0x2000008c

0800047c <getKeyInput>:

void getKeyInput()
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0

	KeyReg2_1 = KeyReg1_1;
 8000482:	4b8a      	ldr	r3, [pc, #552]	; (80006ac <getKeyInput+0x230>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a8a      	ldr	r2, [pc, #552]	; (80006b0 <getKeyInput+0x234>)
 8000488:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg0_1;
 800048a:	4b8a      	ldr	r3, [pc, #552]	; (80006b4 <getKeyInput+0x238>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a87      	ldr	r2, [pc, #540]	; (80006ac <getKeyInput+0x230>)
 8000490:	6013      	str	r3, [r2, #0]
	KeyReg0_1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000492:	2102      	movs	r1, #2
 8000494:	4888      	ldr	r0, [pc, #544]	; (80006b8 <getKeyInput+0x23c>)
 8000496:	f001 f9f5 	bl	8001884 <HAL_GPIO_ReadPin>
 800049a:	4603      	mov	r3, r0
 800049c:	461a      	mov	r2, r3
 800049e:	4b85      	ldr	r3, [pc, #532]	; (80006b4 <getKeyInput+0x238>)
 80004a0:	601a      	str	r2, [r3, #0]

	int keyState = (KeyReg0_1 == KeyReg1_1) && (KeyReg0_1 == KeyReg2_1);
 80004a2:	4b84      	ldr	r3, [pc, #528]	; (80006b4 <getKeyInput+0x238>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b81      	ldr	r3, [pc, #516]	; (80006ac <getKeyInput+0x230>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d107      	bne.n	80004be <getKeyInput+0x42>
 80004ae:	4b81      	ldr	r3, [pc, #516]	; (80006b4 <getKeyInput+0x238>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b7f      	ldr	r3, [pc, #508]	; (80006b0 <getKeyInput+0x234>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d101      	bne.n	80004be <getKeyInput+0x42>
 80004ba:	2301      	movs	r3, #1
 80004bc:	e000      	b.n	80004c0 <getKeyInput+0x44>
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]

    switch (keyState)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d017      	beq.n	80004f8 <getKeyInput+0x7c>
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d12c      	bne.n	8000528 <getKeyInput+0xac>
    {
        case 1: // Key is stable
            if (KeyReg2_1 == PRESSED_STATE)
 80004ce:	4b78      	ldr	r3, [pc, #480]	; (80006b0 <getKeyInput+0x234>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d125      	bne.n	8000522 <getKeyInput+0xa6>
            {
                if (TimeOutForKeyPress1 == 0)
 80004d6:	4b79      	ldr	r3, [pc, #484]	; (80006bc <getKeyInput+0x240>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d106      	bne.n	80004ec <getKeyInput+0x70>
                {
                    subLongKeyProcess(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff ffa4 	bl	800042c <subLongKeyProcess>
                    TimeOutForKeyPress1 = 150;
 80004e4:	4b75      	ldr	r3, [pc, #468]	; (80006bc <getKeyInput+0x240>)
 80004e6:	2296      	movs	r2, #150	; 0x96
 80004e8:	601a      	str	r2, [r3, #0]
                else
                {
                    TimeOutForKeyPress1--;
                }
            }
            break;
 80004ea:	e01a      	b.n	8000522 <getKeyInput+0xa6>
                    TimeOutForKeyPress1--;
 80004ec:	4b73      	ldr	r3, [pc, #460]	; (80006bc <getKeyInput+0x240>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	4a72      	ldr	r2, [pc, #456]	; (80006bc <getKeyInput+0x240>)
 80004f4:	6013      	str	r3, [r2, #0]
            break;
 80004f6:	e014      	b.n	8000522 <getKeyInput+0xa6>
        case 0: // Key state is changing
            if (KeyReg0_1 != KeyReg1_1)
 80004f8:	4b6e      	ldr	r3, [pc, #440]	; (80006b4 <getKeyInput+0x238>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <getKeyInput+0x230>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	429a      	cmp	r2, r3
 8000502:	d010      	beq.n	8000526 <getKeyInput+0xaa>
            {
                KeyReg1_1 = KeyReg0_1;
 8000504:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <getKeyInput+0x238>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a68      	ldr	r2, [pc, #416]	; (80006ac <getKeyInput+0x230>)
 800050a:	6013      	str	r3, [r2, #0]
                if (KeyReg1_1 == PRESSED_STATE)
 800050c:	4b67      	ldr	r3, [pc, #412]	; (80006ac <getKeyInput+0x230>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d108      	bne.n	8000526 <getKeyInput+0xaa>
                {
                    TimeOutForKeyPress1 = 150;
 8000514:	4b69      	ldr	r3, [pc, #420]	; (80006bc <getKeyInput+0x240>)
 8000516:	2296      	movs	r2, #150	; 0x96
 8000518:	601a      	str	r2, [r3, #0]
                    subKeyProcess(1);
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ff5e 	bl	80003dc <subKeyProcess>
                }
            }
            break;
 8000520:	e001      	b.n	8000526 <getKeyInput+0xaa>
            break;
 8000522:	bf00      	nop
 8000524:	e000      	b.n	8000528 <getKeyInput+0xac>
            break;
 8000526:	bf00      	nop
    }

	KeyReg2_2 = KeyReg1_2;
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <getKeyInput+0x244>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a65      	ldr	r2, [pc, #404]	; (80006c4 <getKeyInput+0x248>)
 800052e:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg0_2;
 8000530:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <getKeyInput+0x24c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a62      	ldr	r2, [pc, #392]	; (80006c0 <getKeyInput+0x244>)
 8000536:	6013      	str	r3, [r2, #0]
	KeyReg0_2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 8000538:	2104      	movs	r1, #4
 800053a:	485f      	ldr	r0, [pc, #380]	; (80006b8 <getKeyInput+0x23c>)
 800053c:	f001 f9a2 	bl	8001884 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <getKeyInput+0x24c>)
 8000546:	601a      	str	r2, [r3, #0]

	int keyState2 = (KeyReg0_2 == KeyReg1_2) && (KeyReg0_2 == KeyReg2_2);
 8000548:	4b5f      	ldr	r3, [pc, #380]	; (80006c8 <getKeyInput+0x24c>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b5c      	ldr	r3, [pc, #368]	; (80006c0 <getKeyInput+0x244>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d107      	bne.n	8000564 <getKeyInput+0xe8>
 8000554:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <getKeyInput+0x24c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b5a      	ldr	r3, [pc, #360]	; (80006c4 <getKeyInput+0x248>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d101      	bne.n	8000564 <getKeyInput+0xe8>
 8000560:	2301      	movs	r3, #1
 8000562:	e000      	b.n	8000566 <getKeyInput+0xea>
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]

	switch (keyState2)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d017      	beq.n	800059e <getKeyInput+0x122>
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d12c      	bne.n	80005ce <getKeyInput+0x152>
	{
		case 1: // Key is stable
			if (KeyReg2_2 == PRESSED_STATE)
 8000574:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <getKeyInput+0x248>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d125      	bne.n	80005c8 <getKeyInput+0x14c>
			{
				if (TimeOutForKeyPress2 == 0)
 800057c:	4b53      	ldr	r3, [pc, #332]	; (80006cc <getKeyInput+0x250>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d106      	bne.n	8000592 <getKeyInput+0x116>
				{
					subLongKeyProcess(2);
 8000584:	2002      	movs	r0, #2
 8000586:	f7ff ff51 	bl	800042c <subLongKeyProcess>
					TimeOutForKeyPress2 = 150;
 800058a:	4b50      	ldr	r3, [pc, #320]	; (80006cc <getKeyInput+0x250>)
 800058c:	2296      	movs	r2, #150	; 0x96
 800058e:	601a      	str	r2, [r3, #0]
				else
				{
					TimeOutForKeyPress2--;
				}
			}
			break;
 8000590:	e01a      	b.n	80005c8 <getKeyInput+0x14c>
					TimeOutForKeyPress2--;
 8000592:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <getKeyInput+0x250>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3b01      	subs	r3, #1
 8000598:	4a4c      	ldr	r2, [pc, #304]	; (80006cc <getKeyInput+0x250>)
 800059a:	6013      	str	r3, [r2, #0]
			break;
 800059c:	e014      	b.n	80005c8 <getKeyInput+0x14c>
		case 0: // Key state is changing
			if (KeyReg0_2 != KeyReg1_2)
 800059e:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <getKeyInput+0x24c>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <getKeyInput+0x244>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d010      	beq.n	80005cc <getKeyInput+0x150>
			{
				KeyReg1_2 = KeyReg0_2;
 80005aa:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <getKeyInput+0x24c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a44      	ldr	r2, [pc, #272]	; (80006c0 <getKeyInput+0x244>)
 80005b0:	6013      	str	r3, [r2, #0]
				if (KeyReg1_2 == PRESSED_STATE)
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <getKeyInput+0x244>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d108      	bne.n	80005cc <getKeyInput+0x150>
				{
					TimeOutForKeyPress2 = 150;
 80005ba:	4b44      	ldr	r3, [pc, #272]	; (80006cc <getKeyInput+0x250>)
 80005bc:	2296      	movs	r2, #150	; 0x96
 80005be:	601a      	str	r2, [r3, #0]
					subKeyProcess(2);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f7ff ff0b 	bl	80003dc <subKeyProcess>
				}
			}
			break;
 80005c6:	e001      	b.n	80005cc <getKeyInput+0x150>
			break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <getKeyInput+0x152>
			break;
 80005cc:	bf00      	nop
	}

	KeyReg2_3 = KeyReg1_3;
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <getKeyInput+0x254>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a40      	ldr	r2, [pc, #256]	; (80006d4 <getKeyInput+0x258>)
 80005d4:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg0_3;
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <getKeyInput+0x25c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a3d      	ldr	r2, [pc, #244]	; (80006d0 <getKeyInput+0x254>)
 80005dc:	6013      	str	r3, [r2, #0]
	KeyReg0_3 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 80005de:	2108      	movs	r1, #8
 80005e0:	4835      	ldr	r0, [pc, #212]	; (80006b8 <getKeyInput+0x23c>)
 80005e2:	f001 f94f 	bl	8001884 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <getKeyInput+0x25c>)
 80005ec:	601a      	str	r2, [r3, #0]

	int keyState3 = (KeyReg0_3 == KeyReg1_3) && (KeyReg0_3 == KeyReg2_3);
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <getKeyInput+0x25c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <getKeyInput+0x254>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d107      	bne.n	800060a <getKeyInput+0x18e>
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <getKeyInput+0x25c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <getKeyInput+0x258>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d101      	bne.n	800060a <getKeyInput+0x18e>
 8000606:	2301      	movs	r3, #1
 8000608:	e000      	b.n	800060c <getKeyInput+0x190>
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]

	switch (keyState3)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d017      	beq.n	8000644 <getKeyInput+0x1c8>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d12c      	bne.n	8000674 <getKeyInput+0x1f8>
	{
		case 1: // Key is stable
			if (KeyReg2_3 == PRESSED_STATE)
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <getKeyInput+0x258>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d125      	bne.n	800066e <getKeyInput+0x1f2>
			{
				if (TimeOutForKeyPress3 == 0)
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <getKeyInput+0x260>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d106      	bne.n	8000638 <getKeyInput+0x1bc>
				{
					subLongKeyProcess(3);
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff fefe 	bl	800042c <subLongKeyProcess>
					TimeOutForKeyPress3 = 150;
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <getKeyInput+0x260>)
 8000632:	2296      	movs	r2, #150	; 0x96
 8000634:	601a      	str	r2, [r3, #0]
				else
				{
					TimeOutForKeyPress3--;
				}
			}
			break;
 8000636:	e01a      	b.n	800066e <getKeyInput+0x1f2>
					TimeOutForKeyPress3--;
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <getKeyInput+0x260>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <getKeyInput+0x260>)
 8000640:	6013      	str	r3, [r2, #0]
			break;
 8000642:	e014      	b.n	800066e <getKeyInput+0x1f2>
		case 0: // Key state is changing
			if (KeyReg0_3 != KeyReg1_3)
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <getKeyInput+0x25c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <getKeyInput+0x254>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d010      	beq.n	8000672 <getKeyInput+0x1f6>
			{
				KeyReg1_3 = KeyReg0_3;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <getKeyInput+0x25c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <getKeyInput+0x254>)
 8000656:	6013      	str	r3, [r2, #0]
				if (KeyReg1_3 == PRESSED_STATE)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <getKeyInput+0x254>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d108      	bne.n	8000672 <getKeyInput+0x1f6>
				{
					TimeOutForKeyPress3 = 150;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <getKeyInput+0x260>)
 8000662:	2296      	movs	r2, #150	; 0x96
 8000664:	601a      	str	r2, [r3, #0]
					subKeyProcess(3);
 8000666:	2003      	movs	r0, #3
 8000668:	f7ff feb8 	bl	80003dc <subKeyProcess>
				}
			}
			break;
 800066c:	e001      	b.n	8000672 <getKeyInput+0x1f6>
			break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <getKeyInput+0x1f8>
			break;
 8000672:	bf00      	nop
	}

    if (KeyReg3_1 == PRESSED_STATE || KeyReg3_2 == PRESSED_STATE || KeyReg3_3 == PRESSED_STATE)
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <getKeyInput+0x264>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d007      	beq.n	800068c <getKeyInput+0x210>
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <getKeyInput+0x268>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <getKeyInput+0x210>
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <getKeyInput+0x26c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <getKeyInput+0x21c>
    {
    	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <getKeyInput+0x23c>)
 8000692:	f001 f90e 	bl	80018b2 <HAL_GPIO_WritePin>
 8000696:	e005      	b.n	80006a4 <getKeyInput+0x228>
    }
    else
    {
    	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <getKeyInput+0x23c>)
 800069e:	f001 f908 	bl	80018b2 <HAL_GPIO_WritePin>
    }
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000004 	.word	0x20000004
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000000 	.word	0x20000000
 80006b8:	40010800 	.word	0x40010800
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000014 	.word	0x20000014
 80006c4:	20000018 	.word	0x20000018
 80006c8:	20000010 	.word	0x20000010
 80006cc:	20000034 	.word	0x20000034
 80006d0:	20000024 	.word	0x20000024
 80006d4:	20000028 	.word	0x20000028
 80006d8:	20000020 	.word	0x20000020
 80006dc:	20000038 	.word	0x20000038
 80006e0:	2000000c 	.word	0x2000000c
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	2000002c 	.word	0x2000002c

080006ec <fsm_auto_run>:
 */

#include "fsm_auto.h"

void fsm_auto_run()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	switch(status)
 80006f0:	4b93      	ldr	r3, [pc, #588]	; (8000940 <fsm_auto_run+0x254>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	f200 8121 	bhi.w	800093c <fsm_auto_run+0x250>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <fsm_auto_run+0x14>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000715 	.word	0x08000715
 8000704:	0800073b 	.word	0x0800073b
 8000708:	080007b9 	.word	0x080007b9
 800070c:	08000839 	.word	0x08000839
 8000710:	080008b7 	.word	0x080008b7
	{
		case INIT:
			ledReset();
 8000714:	f000 fb46 	bl	8000da4 <ledReset>
			status = 1;
 8000718:	4b89      	ldr	r3, [pc, #548]	; (8000940 <fsm_auto_run+0x254>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 800071e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fcc0 	bl	80010a8 <setTimer>
			setTimer(1, 250);
 8000728:	21fa      	movs	r1, #250	; 0xfa
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fcbc 	bl	80010a8 <setTimer>
			count = duration_G;
 8000730:	4b84      	ldr	r3, [pc, #528]	; (8000944 <fsm_auto_run+0x258>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a84      	ldr	r2, [pc, #528]	; (8000948 <fsm_auto_run+0x25c>)
 8000736:	6013      	str	r3, [r2, #0]
			break;
 8000738:	e100      	b.n	800093c <fsm_auto_run+0x250>
		case GREEN_RED:
			ledGreen_Red();
 800073a:	f000 fb7f 	bl	8000e3c <ledGreen_Red>
			if (timer_flag[1] == 1)
 800073e:	4b83      	ldr	r3, [pc, #524]	; (800094c <fsm_auto_run+0x260>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d110      	bne.n	8000768 <fsm_auto_run+0x7c>
			{
				display7SEG_Auto(count, count + duration_Y);
 8000746:	4b80      	ldr	r3, [pc, #512]	; (8000948 <fsm_auto_run+0x25c>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	4b7f      	ldr	r3, [pc, #508]	; (8000948 <fsm_auto_run+0x25c>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b80      	ldr	r3, [pc, #512]	; (8000950 <fsm_auto_run+0x264>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4619      	mov	r1, r3
 8000756:	f7ff fdc1 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 800075a:	4b7c      	ldr	r3, [pc, #496]	; (800094c <fsm_auto_run+0x260>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000760:	21fa      	movs	r1, #250	; 0xfa
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fca0 	bl	80010a8 <setTimer>
			}
			if (timer_flag[0] == 1)
 8000768:	4b78      	ldr	r3, [pc, #480]	; (800094c <fsm_auto_run+0x260>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d119      	bne.n	80007a4 <fsm_auto_run+0xb8>
			{
				count--;
 8000770:	4b75      	ldr	r3, [pc, #468]	; (8000948 <fsm_auto_run+0x25c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3b01      	subs	r3, #1
 8000776:	4a74      	ldr	r2, [pc, #464]	; (8000948 <fsm_auto_run+0x25c>)
 8000778:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 800077a:	4b73      	ldr	r3, [pc, #460]	; (8000948 <fsm_auto_run+0x25c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	dc08      	bgt.n	8000794 <fsm_auto_run+0xa8>
				{
					ledReset();
 8000782:	f000 fb0f 	bl	8000da4 <ledReset>
					status = 2;
 8000786:	4b6e      	ldr	r3, [pc, #440]	; (8000940 <fsm_auto_run+0x254>)
 8000788:	2202      	movs	r2, #2
 800078a:	601a      	str	r2, [r3, #0]
					count = duration_Y;
 800078c:	4b70      	ldr	r3, [pc, #448]	; (8000950 <fsm_auto_run+0x264>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a6d      	ldr	r2, [pc, #436]	; (8000948 <fsm_auto_run+0x25c>)
 8000792:	6013      	str	r3, [r2, #0]
				}
				timer_flag[0] = 0;
 8000794:	4b6d      	ldr	r3, [pc, #436]	; (800094c <fsm_auto_run+0x260>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 800079a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fc82 	bl	80010a8 <setTimer>
			}
			if (isButton2Pressed() == 1)
 80007a4:	f7ff fdda 	bl	800035c <isButton2Pressed>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	f040 80bf 	bne.w	800092e <fsm_auto_run+0x242>
			{
				button2_flag = 0;
 80007b0:	4b68      	ldr	r3, [pc, #416]	; (8000954 <fsm_auto_run+0x268>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			}
			break;
 80007b6:	e0ba      	b.n	800092e <fsm_auto_run+0x242>
		case YELLOW_RED:
			ledYellow_Red();
 80007b8:	f000 fb52 	bl	8000e60 <ledYellow_Red>
			if (timer_flag[1] == 1)
 80007bc:	4b63      	ldr	r3, [pc, #396]	; (800094c <fsm_auto_run+0x260>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10e      	bne.n	80007e2 <fsm_auto_run+0xf6>
			{
				display7SEG_Auto(count, count);
 80007c4:	4b60      	ldr	r3, [pc, #384]	; (8000948 <fsm_auto_run+0x25c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a5f      	ldr	r2, [pc, #380]	; (8000948 <fsm_auto_run+0x25c>)
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd84 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <fsm_auto_run+0x260>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 80007da:	21fa      	movs	r1, #250	; 0xfa
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 fc63 	bl	80010a8 <setTimer>
			}
			if (timer_flag[0] == 1)
 80007e2:	4b5a      	ldr	r3, [pc, #360]	; (800094c <fsm_auto_run+0x260>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d11c      	bne.n	8000824 <fsm_auto_run+0x138>
			{
				count--;
 80007ea:	4b57      	ldr	r3, [pc, #348]	; (8000948 <fsm_auto_run+0x25c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	4a55      	ldr	r2, [pc, #340]	; (8000948 <fsm_auto_run+0x25c>)
 80007f2:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <fsm_auto_run+0x25c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc0b      	bgt.n	8000814 <fsm_auto_run+0x128>
				{
					ledReset();
 80007fc:	f000 fad2 	bl	8000da4 <ledReset>
					status = 3;
 8000800:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <fsm_auto_run+0x254>)
 8000802:	2203      	movs	r2, #3
 8000804:	601a      	str	r2, [r3, #0]
					count = duration_R - duration_Y;
 8000806:	4b54      	ldr	r3, [pc, #336]	; (8000958 <fsm_auto_run+0x26c>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b51      	ldr	r3, [pc, #324]	; (8000950 <fsm_auto_run+0x264>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	4a4d      	ldr	r2, [pc, #308]	; (8000948 <fsm_auto_run+0x25c>)
 8000812:	6013      	str	r3, [r2, #0]
				}

				timer_flag[0] = 0;
 8000814:	4b4d      	ldr	r3, [pc, #308]	; (800094c <fsm_auto_run+0x260>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 800081a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fc42 	bl	80010a8 <setTimer>
			}
			if (isButton2Pressed() == 1)
 8000824:	f7ff fd9a 	bl	800035c <isButton2Pressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 8081 	bne.w	8000932 <fsm_auto_run+0x246>
			{
				button2_flag = 0;
 8000830:	4b48      	ldr	r3, [pc, #288]	; (8000954 <fsm_auto_run+0x268>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
			}
			break;
 8000836:	e07c      	b.n	8000932 <fsm_auto_run+0x246>
		case RED_GREEN:
			ledRed_Green();
 8000838:	f000 fadc 	bl	8000df4 <ledRed_Green>
			if (timer_flag[1] == 1)
 800083c:	4b43      	ldr	r3, [pc, #268]	; (800094c <fsm_auto_run+0x260>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d111      	bne.n	8000868 <fsm_auto_run+0x17c>
			{
				display7SEG_Auto(count + duration_Y, count);
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <fsm_auto_run+0x25c>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <fsm_auto_run+0x264>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <fsm_auto_run+0x25c>)
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fd41 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 800085a:	4b3c      	ldr	r3, [pc, #240]	; (800094c <fsm_auto_run+0x260>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000860:	21fa      	movs	r1, #250	; 0xfa
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fc20 	bl	80010a8 <setTimer>
			}
			if (timer_flag[0] == 1)
 8000868:	4b38      	ldr	r3, [pc, #224]	; (800094c <fsm_auto_run+0x260>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d119      	bne.n	80008a4 <fsm_auto_run+0x1b8>
			{
				count--;
 8000870:	4b35      	ldr	r3, [pc, #212]	; (8000948 <fsm_auto_run+0x25c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	4a34      	ldr	r2, [pc, #208]	; (8000948 <fsm_auto_run+0x25c>)
 8000878:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <fsm_auto_run+0x25c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	dc08      	bgt.n	8000894 <fsm_auto_run+0x1a8>
				{
					ledReset();
 8000882:	f000 fa8f 	bl	8000da4 <ledReset>
					status = 4;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <fsm_auto_run+0x254>)
 8000888:	2204      	movs	r2, #4
 800088a:	601a      	str	r2, [r3, #0]
					count = duration_Y;
 800088c:	4b30      	ldr	r3, [pc, #192]	; (8000950 <fsm_auto_run+0x264>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <fsm_auto_run+0x25c>)
 8000892:	6013      	str	r3, [r2, #0]
				}
				timer_flag[0] = 0;
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <fsm_auto_run+0x260>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 800089a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 fc02 	bl	80010a8 <setTimer>
			}
			if (isButton2Pressed() == 1)
 80008a4:	f7ff fd5a 	bl	800035c <isButton2Pressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d143      	bne.n	8000936 <fsm_auto_run+0x24a>
			{
				button2_flag = 0;
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <fsm_auto_run+0x268>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
			}
			break;
 80008b4:	e03f      	b.n	8000936 <fsm_auto_run+0x24a>
		case RED_YELLOW:
			ledRed_Yellow();
 80008b6:	f000 faaf 	bl	8000e18 <ledRed_Yellow>
			if (timer_flag[1] == 1)
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <fsm_auto_run+0x260>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d10e      	bne.n	80008e0 <fsm_auto_run+0x1f4>
			{
				display7SEG_Auto(count, count);
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <fsm_auto_run+0x25c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a20      	ldr	r2, [pc, #128]	; (8000948 <fsm_auto_run+0x25c>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fd05 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <fsm_auto_run+0x260>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 80008d8:	21fa      	movs	r1, #250	; 0xfa
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fbe4 	bl	80010a8 <setTimer>
			}
			if (timer_flag[0] == 1)
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <fsm_auto_run+0x260>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d119      	bne.n	800091c <fsm_auto_run+0x230>
			{
				count--;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <fsm_auto_run+0x25c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <fsm_auto_run+0x25c>)
 80008f0:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <fsm_auto_run+0x25c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dc08      	bgt.n	800090c <fsm_auto_run+0x220>
				{
					ledReset();
 80008fa:	f000 fa53 	bl	8000da4 <ledReset>
					status = 1;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <fsm_auto_run+0x254>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
					count = duration_G;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <fsm_auto_run+0x258>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <fsm_auto_run+0x25c>)
 800090a:	6013      	str	r3, [r2, #0]
				}

				timer_flag[0] = 0;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <fsm_auto_run+0x260>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 8000912:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fbc6 	bl	80010a8 <setTimer>
			}
			if (isButton2Pressed() == 1)
 800091c:	f7ff fd1e 	bl	800035c <isButton2Pressed>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d109      	bne.n	800093a <fsm_auto_run+0x24e>
			{
				button2_flag = 0;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <fsm_auto_run+0x268>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			}
			break;
 800092c:	e005      	b.n	800093a <fsm_auto_run+0x24e>
			break;
 800092e:	bf00      	nop
 8000930:	e004      	b.n	800093c <fsm_auto_run+0x250>
			break;
 8000932:	bf00      	nop
 8000934:	e002      	b.n	800093c <fsm_auto_run+0x250>
			break;
 8000936:	bf00      	nop
 8000938:	e000      	b.n	800093c <fsm_auto_run+0x250>
			break;
 800093a:	bf00      	nop
	}

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000078 	.word	0x20000078
 8000944:	20000040 	.word	0x20000040
 8000948:	20000080 	.word	0x20000080
 800094c:	2000010c 	.word	0x2000010c
 8000950:	20000048 	.word	0x20000048
 8000954:	20000094 	.word	0x20000094
 8000958:	20000044 	.word	0x20000044

0800095c <fsm_edit>:
 */

#include <fsm_edit.h>

void fsm_edit()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	switch (status)
 8000960:	4bab      	ldr	r3, [pc, #684]	; (8000c10 <fsm_edit+0x2b4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3b05      	subs	r3, #5
 8000966:	2b08      	cmp	r3, #8
 8000968:	f200 81b1 	bhi.w	8000cce <fsm_edit+0x372>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <fsm_edit+0x18>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000b99 	.word	0x08000b99
 8000978:	08000bd5 	.word	0x08000bd5
 800097c:	08000c3d 	.word	0x08000c3d
 8000980:	08000c79 	.word	0x08000c79
 8000984:	08000ccf 	.word	0x08000ccf
 8000988:	08000ccf 	.word	0x08000ccf
 800098c:	08000999 	.word	0x08000999
 8000990:	08000a43 	.word	0x08000a43
 8000994:	08000aed 	.word	0x08000aed
	{
		case EDIT_RED:
			if (isButton2Pressed() == 1 || isButton2LongPressed() == 1)
 8000998:	f7ff fce0 	bl	800035c <isButton2Pressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d004      	beq.n	80009ac <fsm_edit+0x50>
 80009a2:	f7ff fcfb 	bl	800039c <isButton2LongPressed>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d10a      	bne.n	80009c2 <fsm_edit+0x66>
			{
				duration_ADD++;
 80009ac:	4b99      	ldr	r3, [pc, #612]	; (8000c14 <fsm_edit+0x2b8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a98      	ldr	r2, [pc, #608]	; (8000c14 <fsm_edit+0x2b8>)
 80009b4:	6013      	str	r3, [r2, #0]
				button2_flag = 0;
 80009b6:	4b98      	ldr	r3, [pc, #608]	; (8000c18 <fsm_edit+0x2bc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
				button2_long_pressed = 0;
 80009bc:	4b97      	ldr	r3, [pc, #604]	; (8000c1c <fsm_edit+0x2c0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1)
 80009c2:	4b97      	ldr	r3, [pc, #604]	; (8000c20 <fsm_edit+0x2c4>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d118      	bne.n	80009fc <fsm_edit+0xa0>
			{
				HAL_GPIO_TogglePin(LR_GPIO_Port, LR_Pin);
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4895      	ldr	r0, [pc, #596]	; (8000c24 <fsm_edit+0x2c8>)
 80009ce:	f000 ff88 	bl	80018e2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LR1_GPIO_Port, LR1_Pin);
 80009d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d6:	4893      	ldr	r0, [pc, #588]	; (8000c24 <fsm_edit+0x2c8>)
 80009d8:	f000 ff83 	bl	80018e2 <HAL_GPIO_TogglePin>
				display7SEG_Auto(duration_R + duration_ADD, 2);
 80009dc:	4b92      	ldr	r3, [pc, #584]	; (8000c28 <fsm_edit+0x2cc>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b8c      	ldr	r3, [pc, #560]	; (8000c14 <fsm_edit+0x2b8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc77 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 80009ee:	4b8c      	ldr	r3, [pc, #560]	; (8000c20 <fsm_edit+0x2c4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 80009f4:	21fa      	movs	r1, #250	; 0xfa
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fb56 	bl	80010a8 <setTimer>
			}
			if (isButton3Pressed() == 1)
 80009fc:	f7ff fcbe 	bl	800037c <isButton3Pressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d113      	bne.n	8000a2e <fsm_edit+0xd2>
			{
				duration_R += duration_ADD;
 8000a06:	4b88      	ldr	r3, [pc, #544]	; (8000c28 <fsm_edit+0x2cc>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b82      	ldr	r3, [pc, #520]	; (8000c14 <fsm_edit+0x2b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a85      	ldr	r2, [pc, #532]	; (8000c28 <fsm_edit+0x2cc>)
 8000a12:	6013      	str	r3, [r2, #0]
				if (duration_R > 99)
 8000a14:	4b84      	ldr	r3, [pc, #528]	; (8000c28 <fsm_edit+0x2cc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b63      	cmp	r3, #99	; 0x63
 8000a1a:	dd02      	ble.n	8000a22 <fsm_edit+0xc6>
				{
					duration_R = 1;
 8000a1c:	4b82      	ldr	r3, [pc, #520]	; (8000c28 <fsm_edit+0x2cc>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
				}
				duration_ADD = 0;
 8000a22:	4b7c      	ldr	r3, [pc, #496]	; (8000c14 <fsm_edit+0x2b8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000a28:	4b80      	ldr	r3, [pc, #512]	; (8000c2c <fsm_edit+0x2d0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
			}
			if (isButton1Pressed() == 1)
 8000a2e:	f7ff fc85 	bl	800033c <isButton1Pressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	f040 813d 	bne.w	8000cb4 <fsm_edit+0x358>
			{
				duration_ADD = 0;
 8000a3a:	4b76      	ldr	r3, [pc, #472]	; (8000c14 <fsm_edit+0x2b8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a40:	e138      	b.n	8000cb4 <fsm_edit+0x358>
		case EDIT_YELLOW:
			if (isButton2Pressed() == 1 || isButton2LongPressed() == 1)
 8000a42:	f7ff fc8b 	bl	800035c <isButton2Pressed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d004      	beq.n	8000a56 <fsm_edit+0xfa>
 8000a4c:	f7ff fca6 	bl	800039c <isButton2LongPressed>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10a      	bne.n	8000a6c <fsm_edit+0x110>
			{
				duration_ADD++;
 8000a56:	4b6f      	ldr	r3, [pc, #444]	; (8000c14 <fsm_edit+0x2b8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a6d      	ldr	r2, [pc, #436]	; (8000c14 <fsm_edit+0x2b8>)
 8000a5e:	6013      	str	r3, [r2, #0]

				button2_flag = 0;
 8000a60:	4b6d      	ldr	r3, [pc, #436]	; (8000c18 <fsm_edit+0x2bc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
				button2_long_pressed = 0;
 8000a66:	4b6d      	ldr	r3, [pc, #436]	; (8000c1c <fsm_edit+0x2c0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1)
 8000a6c:	4b6c      	ldr	r3, [pc, #432]	; (8000c20 <fsm_edit+0x2c4>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d118      	bne.n	8000aa6 <fsm_edit+0x14a>
			{
				HAL_GPIO_TogglePin(LY_GPIO_Port, LY_Pin);
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	486b      	ldr	r0, [pc, #428]	; (8000c24 <fsm_edit+0x2c8>)
 8000a78:	f000 ff33 	bl	80018e2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LY1_GPIO_Port, LY1_Pin);
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4868      	ldr	r0, [pc, #416]	; (8000c24 <fsm_edit+0x2c8>)
 8000a82:	f000 ff2e 	bl	80018e2 <HAL_GPIO_TogglePin>
				display7SEG_Auto(duration_Y + duration_ADD, 3);
 8000a86:	4b6a      	ldr	r3, [pc, #424]	; (8000c30 <fsm_edit+0x2d4>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b62      	ldr	r3, [pc, #392]	; (8000c14 <fsm_edit+0x2b8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	2103      	movs	r1, #3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fc22 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <fsm_edit+0x2c4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000a9e:	21fa      	movs	r1, #250	; 0xfa
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 fb01 	bl	80010a8 <setTimer>
			}
			if (isButton3Pressed() == 1)
 8000aa6:	f7ff fc69 	bl	800037c <isButton3Pressed>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d113      	bne.n	8000ad8 <fsm_edit+0x17c>
			{
				duration_Y += duration_ADD;
 8000ab0:	4b5f      	ldr	r3, [pc, #380]	; (8000c30 <fsm_edit+0x2d4>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <fsm_edit+0x2b8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a5d      	ldr	r2, [pc, #372]	; (8000c30 <fsm_edit+0x2d4>)
 8000abc:	6013      	str	r3, [r2, #0]
				if (duration_Y > 99)
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <fsm_edit+0x2d4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b63      	cmp	r3, #99	; 0x63
 8000ac4:	dd02      	ble.n	8000acc <fsm_edit+0x170>
				{
					duration_Y = 1;
 8000ac6:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <fsm_edit+0x2d4>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
				}
				duration_ADD = 0;
 8000acc:	4b51      	ldr	r3, [pc, #324]	; (8000c14 <fsm_edit+0x2b8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000ad2:	4b56      	ldr	r3, [pc, #344]	; (8000c2c <fsm_edit+0x2d0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
			}
			if (isButton1Pressed() == 1)
 8000ad8:	f7ff fc30 	bl	800033c <isButton1Pressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	f040 80ea 	bne.w	8000cb8 <fsm_edit+0x35c>
			{
				duration_ADD = 0;
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <fsm_edit+0x2b8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aea:	e0e5      	b.n	8000cb8 <fsm_edit+0x35c>
		case EDIT_GREEN:
			if (isButton2Pressed() == 1 || isButton2LongPressed() == 1)
 8000aec:	f7ff fc36 	bl	800035c <isButton2Pressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d004      	beq.n	8000b00 <fsm_edit+0x1a4>
 8000af6:	f7ff fc51 	bl	800039c <isButton2LongPressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10a      	bne.n	8000b16 <fsm_edit+0x1ba>
			{
				duration_ADD++;
 8000b00:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <fsm_edit+0x2b8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <fsm_edit+0x2b8>)
 8000b08:	6013      	str	r3, [r2, #0]
				button2_flag = 0;
 8000b0a:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <fsm_edit+0x2bc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
				button2_long_pressed = 0;
 8000b10:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <fsm_edit+0x2c0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1)
 8000b16:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <fsm_edit+0x2c4>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d119      	bne.n	8000b52 <fsm_edit+0x1f6>
			{
				HAL_GPIO_TogglePin(LG_GPIO_Port, LG_Pin);
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	4840      	ldr	r0, [pc, #256]	; (8000c24 <fsm_edit+0x2c8>)
 8000b24:	f000 fedd 	bl	80018e2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LG1_GPIO_Port, LG1_Pin);
 8000b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2c:	483d      	ldr	r0, [pc, #244]	; (8000c24 <fsm_edit+0x2c8>)
 8000b2e:	f000 fed8 	bl	80018e2 <HAL_GPIO_TogglePin>
				display7SEG_Auto(duration_G + duration_ADD, 4);
 8000b32:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <fsm_edit+0x2d8>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <fsm_edit+0x2b8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbcc 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <fsm_edit+0x2c4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000b4a:	21fa      	movs	r1, #250	; 0xfa
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 faab 	bl	80010a8 <setTimer>
			}
			if (isButton3Pressed() == 1)
 8000b52:	f7ff fc13 	bl	800037c <isButton3Pressed>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d113      	bne.n	8000b84 <fsm_edit+0x228>
			{
				duration_G += duration_ADD;
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <fsm_edit+0x2d8>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <fsm_edit+0x2b8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <fsm_edit+0x2d8>)
 8000b68:	6013      	str	r3, [r2, #0]
				if (duration_G > 99)
 8000b6a:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <fsm_edit+0x2d8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b63      	cmp	r3, #99	; 0x63
 8000b70:	dd02      	ble.n	8000b78 <fsm_edit+0x21c>
				{
					duration_G = 1;
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <fsm_edit+0x2d8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
				}
				duration_ADD = 0;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <fsm_edit+0x2b8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <fsm_edit+0x2d0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
			}
			if (isButton1Pressed() == 1)
 8000b84:	f7ff fbda 	bl	800033c <isButton1Pressed>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	f040 8096 	bne.w	8000cbc <fsm_edit+0x360>
			{
				duration_ADD = 0;
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <fsm_edit+0x2b8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b96:	e091      	b.n	8000cbc <fsm_edit+0x360>
		case MAN_GREEN_RED:
			ledGreen_Red();
 8000b98:	f000 f950 	bl	8000e3c <ledGreen_Red>
			if (isButton3Pressed() == 1)
 8000b9c:	f7ff fbee 	bl	800037c <isButton3Pressed>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d107      	bne.n	8000bb6 <fsm_edit+0x25a>
			{
				ledReset();
 8000ba6:	f000 f8fd 	bl	8000da4 <ledReset>
				status = 6;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <fsm_edit+0x2b4>)
 8000bac:	2206      	movs	r2, #6
 8000bae:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <fsm_edit+0x2d0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000bb6:	f7ff fbd1 	bl	800035c <isButton2Pressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d17f      	bne.n	8000cc0 <fsm_edit+0x364>
			{
				status = 0;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <fsm_edit+0x2b4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <fsm_edit+0x2dc>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <fsm_edit+0x2bc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bd2:	e075      	b.n	8000cc0 <fsm_edit+0x364>
		case MAN_YELLOW_RED:
			ledYellow_Red();
 8000bd4:	f000 f944 	bl	8000e60 <ledYellow_Red>
			if (isButton3Pressed() == 1)
 8000bd8:	f7ff fbd0 	bl	800037c <isButton3Pressed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d107      	bne.n	8000bf2 <fsm_edit+0x296>
			{
				ledReset();
 8000be2:	f000 f8df 	bl	8000da4 <ledReset>
				status = 7;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <fsm_edit+0x2b4>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <fsm_edit+0x2d0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000bf2:	f7ff fbb3 	bl	800035c <isButton2Pressed>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d163      	bne.n	8000cc4 <fsm_edit+0x368>
			{
				status = 0;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <fsm_edit+0x2b4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <fsm_edit+0x2dc>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <fsm_edit+0x2bc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c0e:	e059      	b.n	8000cc4 <fsm_edit+0x368>
 8000c10:	20000078 	.word	0x20000078
 8000c14:	2000007c 	.word	0x2000007c
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	20000088 	.word	0x20000088
 8000c20:	2000010c 	.word	0x2000010c
 8000c24:	40010800 	.word	0x40010800
 8000c28:	20000044 	.word	0x20000044
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	20000048 	.word	0x20000048
 8000c34:	20000040 	.word	0x20000040
 8000c38:	2000003c 	.word	0x2000003c
		case MAN_RED_GREEN:
			ledRed_Green();
 8000c3c:	f000 f8da 	bl	8000df4 <ledRed_Green>
			if (isButton3Pressed() == 1)
 8000c40:	f7ff fb9c 	bl	800037c <isButton3Pressed>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d107      	bne.n	8000c5a <fsm_edit+0x2fe>
			{
				ledReset();
 8000c4a:	f000 f8ab 	bl	8000da4 <ledReset>
				status = 8;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <fsm_edit+0x378>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <fsm_edit+0x37c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000c5a:	f7ff fb7f 	bl	800035c <isButton2Pressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d131      	bne.n	8000cc8 <fsm_edit+0x36c>
			{
				status = 0;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <fsm_edit+0x378>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <fsm_edit+0x380>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <fsm_edit+0x384>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c76:	e027      	b.n	8000cc8 <fsm_edit+0x36c>
		case MAN_RED_YELLOW:
			ledRed_Yellow();
 8000c78:	f000 f8ce 	bl	8000e18 <ledRed_Yellow>
			if (isButton3Pressed() == 1)
 8000c7c:	f7ff fb7e 	bl	800037c <isButton3Pressed>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d107      	bne.n	8000c96 <fsm_edit+0x33a>
			{
				ledReset();
 8000c86:	f000 f88d 	bl	8000da4 <ledReset>
				status = 5;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <fsm_edit+0x378>)
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <fsm_edit+0x37c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000c96:	f7ff fb61 	bl	800035c <isButton2Pressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d115      	bne.n	8000ccc <fsm_edit+0x370>
			{
				status = 0;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <fsm_edit+0x378>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <fsm_edit+0x380>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <fsm_edit+0x384>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cb2:	e00b      	b.n	8000ccc <fsm_edit+0x370>
			break;
 8000cb4:	bf00      	nop
 8000cb6:	e00a      	b.n	8000cce <fsm_edit+0x372>
			break;
 8000cb8:	bf00      	nop
 8000cba:	e008      	b.n	8000cce <fsm_edit+0x372>
			break;
 8000cbc:	bf00      	nop
 8000cbe:	e006      	b.n	8000cce <fsm_edit+0x372>
			break;
 8000cc0:	bf00      	nop
 8000cc2:	e004      	b.n	8000cce <fsm_edit+0x372>
			break;
 8000cc4:	bf00      	nop
 8000cc6:	e002      	b.n	8000cce <fsm_edit+0x372>
			break;
 8000cc8:	bf00      	nop
 8000cca:	e000      	b.n	8000cce <fsm_edit+0x372>
			break;
 8000ccc:	bf00      	nop
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000078 	.word	0x20000078
 8000cd8:	20000098 	.word	0x20000098
 8000cdc:	2000003c 	.word	0x2000003c
 8000ce0:	20000094 	.word	0x20000094

08000ce4 <changeMode>:

#include <fsm_setting.h>
int mode = 1;

void changeMode()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	mode++;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <changeMode+0x6c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <changeMode+0x6c>)
 8000cf0:	6013      	str	r3, [r2, #0]
	if (mode >= 5)
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <changeMode+0x6c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	dd02      	ble.n	8000d00 <changeMode+0x1c>
	{
		mode = 1;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <changeMode+0x6c>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <changeMode+0x6c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d820      	bhi.n	8000d4c <changeMode+0x68>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <changeMode+0x2c>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d21 	.word	0x08000d21
 8000d14:	08000d29 	.word	0x08000d29
 8000d18:	08000d35 	.word	0x08000d35
 8000d1c:	08000d41 	.word	0x08000d41
	{
		case 1:
			status = 0;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <changeMode+0x70>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
			break;
 8000d26:	e011      	b.n	8000d4c <changeMode+0x68>
		case 2:
			ledReset();
 8000d28:	f000 f83c 	bl	8000da4 <ledReset>
			status = 11;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <changeMode+0x70>)
 8000d2e:	220b      	movs	r2, #11
 8000d30:	601a      	str	r2, [r3, #0]
			break;
 8000d32:	e00b      	b.n	8000d4c <changeMode+0x68>
		case 3:
			ledReset();
 8000d34:	f000 f836 	bl	8000da4 <ledReset>
			status = 12;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <changeMode+0x70>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
			break;
 8000d3e:	e005      	b.n	8000d4c <changeMode+0x68>
		case 4:
			ledReset();
 8000d40:	f000 f830 	bl	8000da4 <ledReset>
			status = 13;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <changeMode+0x70>)
 8000d46:	220d      	movs	r2, #13
 8000d48:	601a      	str	r2, [r3, #0]
			break;
 8000d4a:	bf00      	nop
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000003c 	.word	0x2000003c
 8000d54:	20000078 	.word	0x20000078

08000d58 <fsm_config>:

void fsm_config()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	if (isButton1Pressed() == 1)
 8000d5c:	f7ff faee 	bl	800033c <isButton1Pressed>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d107      	bne.n	8000d76 <fsm_config+0x1e>
	{
		changeMode();
 8000d66:	f7ff ffbd 	bl	8000ce4 <changeMode>
		button1_flag = 0;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <fsm_config+0x3c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
		button1_long_pressed = 0;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <fsm_config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
	}
	if (isButton3LongPressed() == 1)
 8000d76:	f7ff fb21 	bl	80003bc <isButton3LongPressed>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d107      	bne.n	8000d90 <fsm_config+0x38>
	{
		ledReset();
 8000d80:	f000 f810 	bl	8000da4 <ledReset>
		status = 5;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <fsm_config+0x44>)
 8000d86:	2205      	movs	r2, #5
 8000d88:	601a      	str	r2, [r3, #0]
		button3_long_pressed = 0;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <fsm_config+0x48>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
	}
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000090 	.word	0x20000090
 8000d98:	20000084 	.word	0x20000084
 8000d9c:	20000078 	.word	0x20000078
 8000da0:	2000008c 	.word	0x2000008c

08000da4 <ledReset>:
 *      Author: ADMIN
 */
#include "light_traffic.h"

void ledReset()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	4810      	ldr	r0, [pc, #64]	; (8000df0 <ledReset+0x4c>)
 8000dae:	f000 fd80 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY_GPIO_Port, LY_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	480e      	ldr	r0, [pc, #56]	; (8000df0 <ledReset+0x4c>)
 8000db8:	f000 fd7b 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <ledReset+0x4c>)
 8000dc4:	f000 fd75 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR1_GPIO_Port, LR1_Pin, SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <ledReset+0x4c>)
 8000dd0:	f000 fd6f 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY1_GPIO_Port, LY1_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <ledReset+0x4c>)
 8000ddc:	f000 fd69 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG1_GPIO_Port, LG1_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	4802      	ldr	r0, [pc, #8]	; (8000df0 <ledReset+0x4c>)
 8000de8:	f000 fd63 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010800 	.word	0x40010800

08000df4 <ledRed_Green>:
void ledRed_Green()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <ledRed_Green+0x20>)
 8000dfe:	f000 fd58 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG1_GPIO_Port, LG1_Pin, RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <ledRed_Green+0x20>)
 8000e0a:	f000 fd52 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010800 	.word	0x40010800

08000e18 <ledRed_Yellow>:

void ledRed_Yellow()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ledRed_Yellow+0x20>)
 8000e22:	f000 fd46 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY1_GPIO_Port, LY1_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <ledRed_Yellow+0x20>)
 8000e2e:	f000 fd40 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010800 	.word	0x40010800

08000e3c <ledGreen_Red>:

void ledGreen_Red()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR1_GPIO_Port, LR1_Pin, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <ledGreen_Red+0x20>)
 8000e48:	f000 fd33 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e52:	4802      	ldr	r0, [pc, #8]	; (8000e5c <ledGreen_Red+0x20>)
 8000e54:	f000 fd2d 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40010800 	.word	0x40010800

08000e60 <ledYellow_Red>:

void ledYellow_Red()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR1_GPIO_Port, LR1_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <ledYellow_Red+0x20>)
 8000e6c:	f000 fd21 	bl	80018b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY_GPIO_Port, LY_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <ledYellow_Red+0x20>)
 8000e76:	f000 fd1c 	bl	80018b2 <HAL_GPIO_WritePin>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f000 fa12 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f810 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 f896 	bl	8000fc0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e94:	f000 f848 	bl	8000f28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <main+0x28>)
 8000e9a:	f001 f967 	bl	800216c <HAL_TIM_Base_Start_IT>



  while (1)
  {
	  fsm_auto_run();
 8000e9e:	f7ff fc25 	bl	80006ec <fsm_auto_run>
	  fsm_edit();
 8000ea2:	f7ff fd5b 	bl	800095c <fsm_edit>
	  fsm_config();
 8000ea6:	f7ff ff57 	bl	8000d58 <fsm_config>
	  fsm_auto_run();
 8000eaa:	e7f8      	b.n	8000e9e <main+0x1a>
 8000eac:	2000009c 	.word	0x2000009c

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	; 0x40
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fd04 	bl	80028cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	2310      	movs	r3, #16
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd14 	bl	8001914 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ef2:	f000 f8d3 	bl	800109c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 ff80 	bl	8001e14 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 f8bf 	bl	800109c <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3740      	adds	r7, #64	; 0x40
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f5c:	2209      	movs	r2, #9
 8000f5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f6e:	f001 f8ad 	bl	80020cc <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f78:	f000 f890 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fa2b 	bl	80023e4 <HAL_TIM_ConfigClockSource>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f94:	f000 f882 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000fa6:	f001 fc03 	bl	80027b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 f874 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000009c 	.word	0x2000009c

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_GPIO_Init+0xb8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <MX_GPIO_Init+0xb8>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_GPIO_Init+0xb8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_GPIO_Init+0xb8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <MX_GPIO_Init+0xb8>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_GPIO_Init+0xb8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_T_Pin|LR_Pin|LY_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <MX_GPIO_Init+0xbc>)
 800100c:	f000 fc51 	bl	80018b2 <HAL_GPIO_WritePin>
                          |LG_Pin|LR1_Pin|LY1_Pin|LG1_Pin
                          |EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG2_4_Pin
 8001010:	2200      	movs	r2, #0
 8001012:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <MX_GPIO_Init+0xc0>)
 8001018:	f000 fc4b 	bl	80018b2 <HAL_GPIO_WritePin>
                          |SEG2_5_Pin|SEG2_6_Pin|SEG2_7_Pin|SEG1_4_Pin
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG2_1_Pin
                          |SEG2_2_Pin|SEG2_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin;
 800101c:	230e      	movs	r3, #14
 800101e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4619      	mov	r1, r3
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_GPIO_Init+0xbc>)
 8001030:	f000 faae 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_T_Pin LR_Pin LY_Pin
                           LG_Pin LR1_Pin LY1_Pin LG1_Pin
                           EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_T_Pin|LR_Pin|LY_Pin
 8001034:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8001038:	60bb      	str	r3, [r7, #8]
                          |LG_Pin|LR1_Pin|LY1_Pin|LG1_Pin
                          |EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <MX_GPIO_Init+0xbc>)
 800104e:	f000 fa9f 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_1_Pin SEG1_2_Pin SEG1_3_Pin SEG2_4_Pin
                           SEG2_5_Pin SEG2_6_Pin SEG2_7_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG2_1_Pin
                           SEG2_2_Pin SEG2_3_Pin */
  GPIO_InitStruct.Pin = SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG2_4_Pin
 8001052:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001056:	60bb      	str	r3, [r7, #8]
                          |SEG2_5_Pin|SEG2_6_Pin|SEG2_7_Pin|SEG1_4_Pin
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG2_1_Pin
                          |SEG2_2_Pin|SEG2_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2302      	movs	r3, #2
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_GPIO_Init+0xc0>)
 800106c:	f000 fa90 	bl	8001590 <HAL_GPIO_Init>

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00

08001084 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	timerRun();
 800108c:	f000 f82c 	bl	80010e8 <timerRun>
	getKeyInput();
 8001090:	f7ff f9f4 	bl	800047c <getKeyInput>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <setTimer>:
#include <software_timer.h>

int timer_flag[10];
int timer_counter[10];
void setTimer(int index, int counter)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]

	timer_flag[index] = 0;
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <setTimer+0x34>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2100      	movs	r1, #0
 80010b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK; //TICK = 10
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <setTimer+0x38>)
 80010c0:	fb82 1203 	smull	r1, r2, r2, r3
 80010c4:	1092      	asrs	r2, r2, #2
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	1ad2      	subs	r2, r2, r3
 80010ca:	4906      	ldr	r1, [pc, #24]	; (80010e4 <setTimer+0x3c>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	2000010c 	.word	0x2000010c
 80010e0:	66666667 	.word	0x66666667
 80010e4:	200000e4 	.word	0x200000e4

080010e8 <timerRun>:

void timerRun()
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	e01c      	b.n	800112e <timerRun+0x46>
	{
		if (timer_counter[i] > 0)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <timerRun+0x58>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd13      	ble.n	8001128 <timerRun+0x40>
		{
			timer_counter[i]--;
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <timerRun+0x58>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <timerRun+0x58>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0)
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <timerRun+0x58>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc04      	bgt.n	8001128 <timerRun+0x40>
			{
				timer_flag[i] = 1;
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <timerRun+0x5c>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2101      	movs	r1, #1
 8001124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 10; i++)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3301      	adds	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b09      	cmp	r3, #9
 8001132:	dddf      	ble.n	80010f4 <timerRun+0xc>
			}
		}
	}
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	200000e4 	.word	0x200000e4
 8001144:	2000010c 	.word	0x2000010c

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d113      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 f9a1 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 f9ba 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f87f 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM2_IRQHandler+0x10>)
 800124a:	f000 ffdb 	bl	8002204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000009c 	.word	0x2000009c

08001258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff fff8 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800126a:	490c      	ldr	r1, [pc, #48]	; (800129c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001280:	4c09      	ldr	r4, [pc, #36]	; (80012a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f001 faf9 	bl	8002884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001292:	f7ff fdf7 	bl	8000e84 <main>
  bx lr
 8001296:	4770      	bx	lr
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012a0:	0800292c 	.word	0x0800292c
  ldr r2, =_sbss
 80012a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012a8:	20000138 	.word	0x20000138

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x28>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x28>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f923 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff ff3c 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f93b 	bl	8001576 <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f903 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000050 	.word	0x20000050
 8001334:	20000058 	.word	0x20000058
 8001338:	20000054 	.word	0x20000054

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_IncTick+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_IncTick+0x20>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	20000058 	.word	0x20000058
 800135c:	20000134 	.word	0x20000134

08001360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_GetTick+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000134 	.word	0x20000134

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <__NVIC_EnableIRQ+0x34>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff90 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff2d 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff42 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff35 	bl	80013d8 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	e148      	b.n	8001836 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a4:	2201      	movs	r2, #1
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f040 8137 	bne.w	8001830 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4aa3      	ldr	r2, [pc, #652]	; (8001854 <HAL_GPIO_Init+0x2c4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d05e      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015cc:	4aa1      	ldr	r2, [pc, #644]	; (8001854 <HAL_GPIO_Init+0x2c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d875      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015d2:	4aa1      	ldr	r2, [pc, #644]	; (8001858 <HAL_GPIO_Init+0x2c8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d058      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015d8:	4a9f      	ldr	r2, [pc, #636]	; (8001858 <HAL_GPIO_Init+0x2c8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d86f      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015de:	4a9f      	ldr	r2, [pc, #636]	; (800185c <HAL_GPIO_Init+0x2cc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d052      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015e4:	4a9d      	ldr	r2, [pc, #628]	; (800185c <HAL_GPIO_Init+0x2cc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d869      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015ea:	4a9d      	ldr	r2, [pc, #628]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d04c      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015f0:	4a9b      	ldr	r2, [pc, #620]	; (8001860 <HAL_GPIO_Init+0x2d0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d863      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 80015f6:	4a9b      	ldr	r2, [pc, #620]	; (8001864 <HAL_GPIO_Init+0x2d4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d046      	beq.n	800168a <HAL_GPIO_Init+0xfa>
 80015fc:	4a99      	ldr	r2, [pc, #612]	; (8001864 <HAL_GPIO_Init+0x2d4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d85d      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 8001602:	2b12      	cmp	r3, #18
 8001604:	d82a      	bhi.n	800165c <HAL_GPIO_Init+0xcc>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d859      	bhi.n	80016be <HAL_GPIO_Init+0x12e>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <HAL_GPIO_Init+0x80>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	0800168b 	.word	0x0800168b
 8001614:	08001665 	.word	0x08001665
 8001618:	08001677 	.word	0x08001677
 800161c:	080016b9 	.word	0x080016b9
 8001620:	080016bf 	.word	0x080016bf
 8001624:	080016bf 	.word	0x080016bf
 8001628:	080016bf 	.word	0x080016bf
 800162c:	080016bf 	.word	0x080016bf
 8001630:	080016bf 	.word	0x080016bf
 8001634:	080016bf 	.word	0x080016bf
 8001638:	080016bf 	.word	0x080016bf
 800163c:	080016bf 	.word	0x080016bf
 8001640:	080016bf 	.word	0x080016bf
 8001644:	080016bf 	.word	0x080016bf
 8001648:	080016bf 	.word	0x080016bf
 800164c:	080016bf 	.word	0x080016bf
 8001650:	080016bf 	.word	0x080016bf
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001681 	.word	0x08001681
 800165c:	4a82      	ldr	r2, [pc, #520]	; (8001868 <HAL_GPIO_Init+0x2d8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001662:	e02c      	b.n	80016be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e029      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	3304      	adds	r3, #4
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e024      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	3308      	adds	r3, #8
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e01f      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	330c      	adds	r3, #12
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e01a      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001692:	2304      	movs	r3, #4
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e013      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	2308      	movs	r3, #8
 80016a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	611a      	str	r2, [r3, #16]
          break;
 80016aa:	e009      	b.n	80016c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ac:	2308      	movs	r3, #8
 80016ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	615a      	str	r2, [r3, #20]
          break;
 80016b6:	e003      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x130>
          break;
 80016be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d801      	bhi.n	80016ca <HAL_GPIO_Init+0x13a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	e001      	b.n	80016ce <HAL_GPIO_Init+0x13e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2bff      	cmp	r3, #255	; 0xff
 80016d4:	d802      	bhi.n	80016dc <HAL_GPIO_Init+0x14c>
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x152>
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3b08      	subs	r3, #8
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	210f      	movs	r1, #15
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	401a      	ands	r2, r3
 80016f4:	6a39      	ldr	r1, [r7, #32]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8090 	beq.w	8001830 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_GPIO_Init+0x2dc>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a55      	ldr	r2, [pc, #340]	; (800186c <HAL_GPIO_Init+0x2dc>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_GPIO_Init+0x2dc>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_GPIO_Init+0x2e0>)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a49      	ldr	r2, [pc, #292]	; (8001874 <HAL_GPIO_Init+0x2e4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_Init+0x1e0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a48      	ldr	r2, [pc, #288]	; (8001878 <HAL_GPIO_Init+0x2e8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0x1dc>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a47      	ldr	r2, [pc, #284]	; (800187c <HAL_GPIO_Init+0x2ec>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_Init+0x1d8>
 8001764:	2302      	movs	r3, #2
 8001766:	e004      	b.n	8001772 <HAL_GPIO_Init+0x1e2>
 8001768:	2303      	movs	r3, #3
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x1e2>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_GPIO_Init+0x1e2>
 8001770:	2300      	movs	r3, #0
 8001772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001782:	493b      	ldr	r1, [pc, #236]	; (8001870 <HAL_GPIO_Init+0x2e0>)
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017aa:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4933      	ldr	r1, [pc, #204]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c4:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	492d      	ldr	r1, [pc, #180]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60cb      	str	r3, [r1, #12]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4929      	ldr	r1, [pc, #164]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4923      	ldr	r1, [pc, #140]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	491f      	ldr	r1, [pc, #124]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 8001804:	4013      	ands	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4919      	ldr	r1, [pc, #100]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4915      	ldr	r1, [pc, #84]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 800182c:	4013      	ands	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3301      	adds	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f aeaf 	bne.w	80015a4 <HAL_GPIO_Init+0x14>
  }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	372c      	adds	r7, #44	; 0x2c
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	10320000 	.word	0x10320000
 8001858:	10310000 	.word	0x10310000
 800185c:	10220000 	.word	0x10220000
 8001860:	10210000 	.word	0x10210000
 8001864:	10120000 	.word	0x10120000
 8001868:	10110000 	.word	0x10110000
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	40010800 	.word	0x40010800
 8001878:	40010c00 	.word	0x40010c00
 800187c:	40011000 	.word	0x40011000
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e001      	b.n	80018a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c8:	887a      	ldrh	r2, [r7, #2]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	041a      	lsls	r2, r3, #16
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f4:	887a      	ldrh	r2, [r7, #2]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	041a      	lsls	r2, r3, #16
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43d9      	mvns	r1, r3
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	400b      	ands	r3, r1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e26c      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001940:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
 800194c:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x12c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e246      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcb6 	bl	8001360 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcb2 	bl	8001360 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1fa      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe4>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fca2 	bl	8001360 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fc9e 	bl	8001360 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1e6      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x10c>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1ba      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fc57 	bl	8001360 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc53 	bl	8001360 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e19b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc36 	bl	8001360 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc32 	bl	8001360 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e17a      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc16 	bl	8001360 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc12 	bl	8001360 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e15a      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fa9a 	bl	8002090 <RCC_Delay>
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fbfc 	bl	8001360 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fbf8 	bl	8001360 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e140      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b9e      	ldr	r3, [pc, #632]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e9      	bne.n	8001b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a6 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b97      	ldr	r3, [pc, #604]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b94      	ldr	r3, [pc, #592]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a93      	ldr	r2, [pc, #588]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a8a      	ldr	r2, [pc, #552]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fbb9 	bl	8001360 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fbb5 	bl	8001360 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0fd      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	e01c      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x356>
 8001c50:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a6c      	ldr	r2, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a66      	ldr	r2, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a63      	ldr	r2, [pc, #396]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d015      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb69 	bl	8001360 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff fb65 	bl	8001360 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0ab      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37e>
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fb53 	bl	8001360 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fb4f 	bl	8001360 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e095      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8081 	beq.w	8001dfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d061      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d146      	bne.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb23 	bl	8001360 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb1f 	bl	8001360 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e067      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	492d      	ldr	r1, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff faf3 	bl	8001360 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff faef 	bl	8001360 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e037      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
 8001d9c:	e02f      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fadc 	bl	8001360 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fad8 	bl	8001360 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e020      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
 8001dca:	e018      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e013      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42420060 	.word	0x42420060

08001e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0d0      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4965      	ldr	r1, [pc, #404]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b8      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	494d      	ldr	r1, [pc, #308]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d040      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e073      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06b      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7ff fa2c 	bl	8001360 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7ff fa28 	bl	8001360 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e053      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d210      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4922      	ldr	r1, [pc, #136]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e032      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4916      	ldr	r1, [pc, #88]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa2:	f000 f821 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490a      	ldr	r1, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f98a 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08002900 	.word	0x08002900
 8001fe0:	20000050 	.word	0x20000050
 8001fe4:	20000054 	.word	0x20000054

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_GetSysClockFreq+0x94>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d002      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x30>
 8002012:	2b08      	cmp	r3, #8
 8002014:	d003      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0x36>
 8002016:	e027      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_GetSysClockFreq+0x98>)
 800201a:	613b      	str	r3, [r7, #16]
      break;
 800201c:	e027      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d010      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_RCC_GetSysClockFreq+0x94>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0c5b      	lsrs	r3, r3, #17
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_RCC_GetSysClockFreq+0x98>)
 800204a:	fb02 f203 	mul.w	r2, r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e004      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_RCC_GetSysClockFreq+0xa4>)
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	613b      	str	r3, [r7, #16]
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0x98>)
 800206a:	613b      	str	r3, [r7, #16]
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	693b      	ldr	r3, [r7, #16]
}
 8002070:	4618      	mov	r0, r3
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	007a1200 	.word	0x007a1200
 8002084:	08002910 	.word	0x08002910
 8002088:	08002920 	.word	0x08002920
 800208c:	003d0900 	.word	0x003d0900

08002090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <RCC_Delay+0x34>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <RCC_Delay+0x38>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0a5b      	lsrs	r3, r3, #9
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020ac:	bf00      	nop
  }
  while (Delay --);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	60fa      	str	r2, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f9      	bne.n	80020ac <RCC_Delay+0x1c>
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	20000050 	.word	0x20000050
 80020c8:	10624dd3 	.word	0x10624dd3

080020cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e041      	b.n	8002162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff f85a 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3304      	adds	r3, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 fa56 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d001      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e035      	b.n	80021f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_TIM_Base_Start_IT+0x90>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_TIM_Base_Start_IT+0x4e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d004      	beq.n	80021ba <HAL_TIM_Base_Start_IT+0x4e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <HAL_TIM_Base_Start_IT+0x94>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d111      	bne.n	80021de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d010      	beq.n	80021ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021dc:	e007      	b.n	80021ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40000400 	.word	0x40000400

08002204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d020      	beq.n	8002268 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01b      	beq.n	8002268 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0202 	mvn.w	r2, #2
 8002238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f998 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f98b 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f99a 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d020      	beq.n	80022b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0204 	mvn.w	r2, #4
 8002284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f972 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f965 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f974 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d020      	beq.n	8002300 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0208 	mvn.w	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f94c 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f93f 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f94e 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d020      	beq.n	800234c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01b      	beq.n	800234c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f926 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f919 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f928 	bl	8002596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0201 	mvn.w	r2, #1
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fe8a 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa6f 	bl	8002872 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8f8 	bl	80025a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0220 	mvn.w	r2, #32
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa42 	bl	8002860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0b4      	b.n	800256a <HAL_TIM_ConfigClockSource+0x186>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d03e      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0xd4>
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	f200 8087 	bhi.w	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	f000 8086 	beq.w	8002556 <HAL_TIM_ConfigClockSource+0x172>
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d87f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b70      	cmp	r3, #112	; 0x70
 8002452:	d01a      	beq.n	800248a <HAL_TIM_ConfigClockSource+0xa6>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d87b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b60      	cmp	r3, #96	; 0x60
 800245a:	d050      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x11a>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d877      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b50      	cmp	r3, #80	; 0x50
 8002462:	d03c      	beq.n	80024de <HAL_TIM_ConfigClockSource+0xfa>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d873      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d058      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x13a>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d86f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d064      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d86b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b20      	cmp	r3, #32
 800247a:	d060      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d867      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b10      	cmp	r3, #16
 8002486:	d05a      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x15a>
 8002488:	e062      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f000 f96a 	bl	8002772 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	609a      	str	r2, [r3, #8]
      break;
 80024b6:	e04f      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f000 f953 	bl	8002772 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024da:	609a      	str	r2, [r3, #8]
      break;
 80024dc:	e03c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 f8ca 	bl	8002684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2150      	movs	r1, #80	; 0x50
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f921 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 80024fc:	e02c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f000 f8e8 	bl	80026e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2160      	movs	r1, #96	; 0x60
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f911 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 800251c:	e01c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	f000 f8aa 	bl	8002684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f901 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 800253c:	e00c      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f000 f8f8 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 800254e:	e003      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e000      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
	...

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <TIM_Base_SetConfig+0xc0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x28>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x28>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <TIM_Base_SetConfig+0xc4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a20      	ldr	r2, [pc, #128]	; (800267c <TIM_Base_SetConfig+0xc0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0x52>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0x52>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <TIM_Base_SetConfig+0xc4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0d      	ldr	r2, [pc, #52]	; (800267c <TIM_Base_SetConfig+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f023 0201 	bic.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
  }
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40000400 	.word	0x40000400

08002684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 030a 	bic.w	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	621a      	str	r2, [r3, #32]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0210 	bic.w	r2, r3, #16
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	031b      	lsls	r3, r3, #12
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800271c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	621a      	str	r2, [r3, #32]
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	f043 0307 	orr.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800278c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e041      	b.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d004      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400

08002860 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <__libc_init_array>:
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	2600      	movs	r6, #0
 8002888:	4d0c      	ldr	r5, [pc, #48]	; (80028bc <__libc_init_array+0x38>)
 800288a:	4c0d      	ldr	r4, [pc, #52]	; (80028c0 <__libc_init_array+0x3c>)
 800288c:	1b64      	subs	r4, r4, r5
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	42a6      	cmp	r6, r4
 8002892:	d109      	bne.n	80028a8 <__libc_init_array+0x24>
 8002894:	f000 f822 	bl	80028dc <_init>
 8002898:	2600      	movs	r6, #0
 800289a:	4d0a      	ldr	r5, [pc, #40]	; (80028c4 <__libc_init_array+0x40>)
 800289c:	4c0a      	ldr	r4, [pc, #40]	; (80028c8 <__libc_init_array+0x44>)
 800289e:	1b64      	subs	r4, r4, r5
 80028a0:	10a4      	asrs	r4, r4, #2
 80028a2:	42a6      	cmp	r6, r4
 80028a4:	d105      	bne.n	80028b2 <__libc_init_array+0x2e>
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
 80028a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ac:	4798      	blx	r3
 80028ae:	3601      	adds	r6, #1
 80028b0:	e7ee      	b.n	8002890 <__libc_init_array+0xc>
 80028b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b6:	4798      	blx	r3
 80028b8:	3601      	adds	r6, #1
 80028ba:	e7f2      	b.n	80028a2 <__libc_init_array+0x1e>
 80028bc:	08002924 	.word	0x08002924
 80028c0:	08002924 	.word	0x08002924
 80028c4:	08002924 	.word	0x08002924
 80028c8:	08002928 	.word	0x08002928

080028cc <memset>:
 80028cc:	4603      	mov	r3, r0
 80028ce:	4402      	add	r2, r0
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d100      	bne.n	80028d6 <memset+0xa>
 80028d4:	4770      	bx	lr
 80028d6:	f803 1b01 	strb.w	r1, [r3], #1
 80028da:	e7f9      	b.n	80028d0 <memset+0x4>

080028dc <_init>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr

080028e8 <_fini>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr
