
Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e0  080028e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080028e0  080028e0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e0  080028e0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000005c  08002944  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002944  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c6b  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d03  00000000  00000000  00029cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001713e  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c95e  00000000  00000000  00043f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826d4  00000000  00000000  000508c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2f98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  000d2fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002898 	.word	0x08002898

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002898 	.word	0x08002898

0800014c <display7SEG>:
 */

#include "7SegLED.h"

void display7SEG(int num, uint32_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    char segNumber[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000156:	4a42      	ldr	r2, [pc, #264]	; (8000260 <display7SEG+0x114>)
 8000158:	f107 030c 	add.w	r3, r7, #12
 800015c:	ca07      	ldmia	r2, {r0, r1, r2}
 800015e:	c303      	stmia	r3!, {r0, r1}
 8000160:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 0, (segNumber[num] >> 0) & 1);
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	b299      	uxth	r1, r3
 8000166:	f107 020c 	add.w	r2, r7, #12
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4413      	add	r3, r2
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	f003 0301 	and.w	r3, r3, #1
 8000174:	b2db      	uxtb	r3, r3
 8000176:	461a      	mov	r2, r3
 8000178:	483a      	ldr	r0, [pc, #232]	; (8000264 <display7SEG+0x118>)
 800017a:	f001 fb78 	bl	800186e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 1, (segNumber[num] >> 1) & 1);
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	b29b      	uxth	r3, r3
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	b299      	uxth	r1, r3
 8000186:	f107 020c 	add.w	r2, r7, #12
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4413      	add	r3, r2
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	085b      	lsrs	r3, r3, #1
 8000192:	b2db      	uxtb	r3, r3
 8000194:	f003 0301 	and.w	r3, r3, #1
 8000198:	b2db      	uxtb	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	4831      	ldr	r0, [pc, #196]	; (8000264 <display7SEG+0x118>)
 800019e:	f001 fb66 	bl	800186e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 2, (segNumber[num] >> 2) & 1);
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	b299      	uxth	r1, r3
 80001aa:	f107 020c 	add.w	r2, r7, #12
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	089b      	lsrs	r3, r3, #2
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	f003 0301 	and.w	r3, r3, #1
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	461a      	mov	r2, r3
 80001c0:	4828      	ldr	r0, [pc, #160]	; (8000264 <display7SEG+0x118>)
 80001c2:	f001 fb54 	bl	800186e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 3, (segNumber[num] >> 3) & 1);
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	00db      	lsls	r3, r3, #3
 80001cc:	b299      	uxth	r1, r3
 80001ce:	f107 020c 	add.w	r2, r7, #12
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4413      	add	r3, r2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	08db      	lsrs	r3, r3, #3
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	461a      	mov	r2, r3
 80001e4:	481f      	ldr	r0, [pc, #124]	; (8000264 <display7SEG+0x118>)
 80001e6:	f001 fb42 	bl	800186e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 4, (segNumber[num] >> 4) & 1);
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	011b      	lsls	r3, r3, #4
 80001f0:	b299      	uxth	r1, r3
 80001f2:	f107 020c 	add.w	r2, r7, #12
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	091b      	lsrs	r3, r3, #4
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	f003 0301 	and.w	r3, r3, #1
 8000204:	b2db      	uxtb	r3, r3
 8000206:	461a      	mov	r2, r3
 8000208:	4816      	ldr	r0, [pc, #88]	; (8000264 <display7SEG+0x118>)
 800020a:	f001 fb30 	bl	800186e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 5, (segNumber[num] >> 5) & 1);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b29b      	uxth	r3, r3
 8000212:	015b      	lsls	r3, r3, #5
 8000214:	b299      	uxth	r1, r3
 8000216:	f107 020c 	add.w	r2, r7, #12
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	095b      	lsrs	r3, r3, #5
 8000222:	b2db      	uxtb	r3, r3
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <display7SEG+0x118>)
 800022e:	f001 fb1e 	bl	800186e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_Pin << 6, (segNumber[num] >> 6) & 1);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b29b      	uxth	r3, r3
 8000236:	019b      	lsls	r3, r3, #6
 8000238:	b299      	uxth	r1, r3
 800023a:	f107 020c 	add.w	r2, r7, #12
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	099b      	lsrs	r3, r3, #6
 8000246:	b2db      	uxtb	r3, r3
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <display7SEG+0x118>)
 8000252:	f001 fb0c 	bl	800186e <HAL_GPIO_WritePin>
}
 8000256:	bf00      	nop
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	080028b0 	.word	0x080028b0
 8000264:	40010c00 	.word	0x40010c00

08000268 <offPin>:

void offPin()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <offPin+0x20>)
 8000274:	f001 fafb 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <offPin+0x20>)
 8000280:	f001 faf5 	bl	800186e <HAL_GPIO_WritePin>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40010800 	.word	0x40010800

0800028c <display7SEG_Dual>:

void display7SEG_Dual(int num)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	int tens = num / 10;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <display7SEG_Dual+0x4c>)
 8000298:	fb82 1203 	smull	r1, r2, r2, r3
 800029c:	1092      	asrs	r2, r2, #2
 800029e:	17db      	asrs	r3, r3, #31
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	60fb      	str	r3, [r7, #12]
	int unit = num % 10;
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <display7SEG_Dual+0x4c>)
 80002a8:	fb83 1302 	smull	r1, r3, r3, r2
 80002ac:	1099      	asrs	r1, r3, #2
 80002ae:	17d3      	asrs	r3, r2, #31
 80002b0:	1ac9      	subs	r1, r1, r3
 80002b2:	460b      	mov	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	1ad3      	subs	r3, r2, r3
 80002bc:	60bb      	str	r3, [r7, #8]

	display7SEG(tens, GPIO_PIN_0);
 80002be:	2101      	movs	r1, #1
 80002c0:	68f8      	ldr	r0, [r7, #12]
 80002c2:	f7ff ff43 	bl	800014c <display7SEG>
	display7SEG(unit, GPIO_PIN_7);
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	68b8      	ldr	r0, [r7, #8]
 80002ca:	f7ff ff3f 	bl	800014c <display7SEG>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	66666667 	.word	0x66666667

080002dc <display7SEG_Auto>:

void display7SEG_Auto(int duration1, int duration2)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
	offPin();
 80002e6:	f7ff ffbf 	bl	8000268 <offPin>
	switch(seg)
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <display7SEG_Auto+0x58>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d002      	beq.n	80002f8 <display7SEG_Auto+0x1c>
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d00d      	beq.n	8000312 <display7SEG_Auto+0x36>
			display7SEG_Dual(duration2);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
			seg = 1;
			break;
	}
}
 80002f6:	e019      	b.n	800032c <display7SEG_Auto+0x50>
			display7SEG_Dual(duration1);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ffc7 	bl	800028c <display7SEG_Dual>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <display7SEG_Auto+0x5c>)
 8000306:	f001 fab2 	bl	800186e <HAL_GPIO_WritePin>
			seg = 2;
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <display7SEG_Auto+0x58>)
 800030c:	2202      	movs	r2, #2
 800030e:	601a      	str	r2, [r3, #0]
			break;
 8000310:	e00c      	b.n	800032c <display7SEG_Auto+0x50>
			display7SEG_Dual(duration2);
 8000312:	6838      	ldr	r0, [r7, #0]
 8000314:	f7ff ffba 	bl	800028c <display7SEG_Dual>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <display7SEG_Auto+0x5c>)
 8000320:	f001 faa5 	bl	800186e <HAL_GPIO_WritePin>
			seg = 1;
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <display7SEG_Auto+0x58>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
			break;
 800032a:	bf00      	nop
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000004c 	.word	0x2000004c
 8000338:	40010800 	.word	0x40010800

0800033c <isButton1Pressed>:

int TimeOutForKeyPress1 =  150;
int TimeOutForKeyPress2 =  150;
int TimeOutForKeyPress3 =  150;

int isButton1Pressed(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <isButton1Pressed+0x1c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <isButton1Pressed+0x10>
		return 1;
 8000348:	2301      	movs	r3, #1
 800034a:	e000      	b.n	800034e <isButton1Pressed+0x12>
	}
	return 0;
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000090 	.word	0x20000090

0800035c <isButton2Pressed>:

int isButton2Pressed(){
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <isButton2Pressed+0x1c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d101      	bne.n	800036c <isButton2Pressed+0x10>
	{
		return 1;
 8000368:	2301      	movs	r3, #1
 800036a:	e000      	b.n	800036e <isButton2Pressed+0x12>
	}
	return 0;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000094 	.word	0x20000094

0800037c <isButton3Pressed>:

int isButton3Pressed(){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <isButton3Pressed+0x1c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d101      	bne.n	800038c <isButton3Pressed+0x10>
	{
		return 1;
 8000388:	2301      	movs	r3, #1
 800038a:	e000      	b.n	800038e <isButton3Pressed+0x12>
	}
	return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000098 	.word	0x20000098

0800039c <isButton2LongPressed>:
		return 1;
	}
	return 0;
}

int isButton2LongPressed(){
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	if(button2_long_pressed == 1)
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <isButton2LongPressed+0x1c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d101      	bne.n	80003ac <isButton2LongPressed+0x10>
	{
		return 1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <isButton2LongPressed+0x12>
	}
	return 0;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000088 	.word	0x20000088

080003bc <isButton3LongPressed>:

int isButton3LongPressed(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	if(button3_long_pressed == 1)
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <isButton3LongPressed+0x1c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d101      	bne.n	80003cc <isButton3LongPressed+0x10>
	{
		return 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	e000      	b.n	80003ce <isButton3LongPressed+0x12>
	}
	return 0;
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000008c 	.word	0x2000008c

080003dc <subKeyProcess>:

void subKeyProcess(int button)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	switch (button)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	d011      	beq.n	800040e <subKeyProcess+0x32>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	dc12      	bgt.n	8000416 <subKeyProcess+0x3a>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d003      	beq.n	80003fe <subKeyProcess+0x22>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d004      	beq.n	8000406 <subKeyProcess+0x2a>
			break;
		case 3:
			button3_flag = 1;
			break;
	}
}
 80003fc:	e00b      	b.n	8000416 <subKeyProcess+0x3a>
			button1_flag = 1;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <subKeyProcess+0x44>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]
			break;
 8000404:	e007      	b.n	8000416 <subKeyProcess+0x3a>
			button2_flag = 1;
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <subKeyProcess+0x48>)
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
			break;
 800040c:	e003      	b.n	8000416 <subKeyProcess+0x3a>
			button3_flag = 1;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <subKeyProcess+0x4c>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
			break;
 8000414:	bf00      	nop
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000090 	.word	0x20000090
 8000424:	20000094 	.word	0x20000094
 8000428:	20000098 	.word	0x20000098

0800042c <subLongKeyProcess>:

void subLongKeyProcess(int button) {
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    // Handle button long press here
    switch (button)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d011      	beq.n	800045e <subLongKeyProcess+0x32>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b03      	cmp	r3, #3
 800043e:	dc12      	bgt.n	8000466 <subLongKeyProcess+0x3a>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <subLongKeyProcess+0x22>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d004      	beq.n	8000456 <subLongKeyProcess+0x2a>
        case 3:
        	button3_long_pressed = 1;
            // Handle long press for button 3 if needed
            break;
    }
}
 800044c:	e00b      	b.n	8000466 <subLongKeyProcess+0x3a>
            button1_long_pressed = 1;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <subLongKeyProcess+0x44>)
 8000450:	2201      	movs	r2, #1
 8000452:	601a      	str	r2, [r3, #0]
            break;
 8000454:	e007      	b.n	8000466 <subLongKeyProcess+0x3a>
        	button2_long_pressed = 1;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <subLongKeyProcess+0x48>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
            break;
 800045c:	e003      	b.n	8000466 <subLongKeyProcess+0x3a>
        	button3_long_pressed = 1;
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <subLongKeyProcess+0x4c>)
 8000460:	2201      	movs	r2, #1
 8000462:	601a      	str	r2, [r3, #0]
            break;
 8000464:	bf00      	nop
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000084 	.word	0x20000084
 8000474:	20000088 	.word	0x20000088
 8000478:	2000008c 	.word	0x2000008c

0800047c <getKeyInput>:

void getKeyInput()
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0

	KeyReg2_1 = KeyReg1_1;
 8000482:	4b8a      	ldr	r3, [pc, #552]	; (80006ac <getKeyInput+0x230>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a8a      	ldr	r2, [pc, #552]	; (80006b0 <getKeyInput+0x234>)
 8000488:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg0_1;
 800048a:	4b8a      	ldr	r3, [pc, #552]	; (80006b4 <getKeyInput+0x238>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a87      	ldr	r2, [pc, #540]	; (80006ac <getKeyInput+0x230>)
 8000490:	6013      	str	r3, [r2, #0]
	KeyReg0_1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000492:	2102      	movs	r1, #2
 8000494:	4888      	ldr	r0, [pc, #544]	; (80006b8 <getKeyInput+0x23c>)
 8000496:	f001 f9d3 	bl	8001840 <HAL_GPIO_ReadPin>
 800049a:	4603      	mov	r3, r0
 800049c:	461a      	mov	r2, r3
 800049e:	4b85      	ldr	r3, [pc, #532]	; (80006b4 <getKeyInput+0x238>)
 80004a0:	601a      	str	r2, [r3, #0]

	int keyState = (KeyReg0_1 == KeyReg1_1) && (KeyReg0_1 == KeyReg2_1);
 80004a2:	4b84      	ldr	r3, [pc, #528]	; (80006b4 <getKeyInput+0x238>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b81      	ldr	r3, [pc, #516]	; (80006ac <getKeyInput+0x230>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d107      	bne.n	80004be <getKeyInput+0x42>
 80004ae:	4b81      	ldr	r3, [pc, #516]	; (80006b4 <getKeyInput+0x238>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b7f      	ldr	r3, [pc, #508]	; (80006b0 <getKeyInput+0x234>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d101      	bne.n	80004be <getKeyInput+0x42>
 80004ba:	2301      	movs	r3, #1
 80004bc:	e000      	b.n	80004c0 <getKeyInput+0x44>
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]

    switch (keyState)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d017      	beq.n	80004f8 <getKeyInput+0x7c>
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d12c      	bne.n	8000528 <getKeyInput+0xac>
    {
        case 1: // Key is stable
            if (KeyReg2_1 == PRESSED_STATE)
 80004ce:	4b78      	ldr	r3, [pc, #480]	; (80006b0 <getKeyInput+0x234>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d125      	bne.n	8000522 <getKeyInput+0xa6>
            {
                if (TimeOutForKeyPress1 == 0)
 80004d6:	4b79      	ldr	r3, [pc, #484]	; (80006bc <getKeyInput+0x240>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d106      	bne.n	80004ec <getKeyInput+0x70>
                {
                    subLongKeyProcess(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff ffa4 	bl	800042c <subLongKeyProcess>
                    TimeOutForKeyPress1 = 150;
 80004e4:	4b75      	ldr	r3, [pc, #468]	; (80006bc <getKeyInput+0x240>)
 80004e6:	2296      	movs	r2, #150	; 0x96
 80004e8:	601a      	str	r2, [r3, #0]
                else
                {
                    TimeOutForKeyPress1--;
                }
            }
            break;
 80004ea:	e01a      	b.n	8000522 <getKeyInput+0xa6>
                    TimeOutForKeyPress1--;
 80004ec:	4b73      	ldr	r3, [pc, #460]	; (80006bc <getKeyInput+0x240>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	4a72      	ldr	r2, [pc, #456]	; (80006bc <getKeyInput+0x240>)
 80004f4:	6013      	str	r3, [r2, #0]
            break;
 80004f6:	e014      	b.n	8000522 <getKeyInput+0xa6>
        case 0: // Key state is changing
            if (KeyReg0_1 != KeyReg1_1)
 80004f8:	4b6e      	ldr	r3, [pc, #440]	; (80006b4 <getKeyInput+0x238>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <getKeyInput+0x230>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	429a      	cmp	r2, r3
 8000502:	d010      	beq.n	8000526 <getKeyInput+0xaa>
            {
                KeyReg1_1 = KeyReg0_1;
 8000504:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <getKeyInput+0x238>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a68      	ldr	r2, [pc, #416]	; (80006ac <getKeyInput+0x230>)
 800050a:	6013      	str	r3, [r2, #0]
                if (KeyReg1_1 == PRESSED_STATE)
 800050c:	4b67      	ldr	r3, [pc, #412]	; (80006ac <getKeyInput+0x230>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d108      	bne.n	8000526 <getKeyInput+0xaa>
                {
                    TimeOutForKeyPress1 = 150;
 8000514:	4b69      	ldr	r3, [pc, #420]	; (80006bc <getKeyInput+0x240>)
 8000516:	2296      	movs	r2, #150	; 0x96
 8000518:	601a      	str	r2, [r3, #0]
                    subKeyProcess(1);
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ff5e 	bl	80003dc <subKeyProcess>
                }
            }
            break;
 8000520:	e001      	b.n	8000526 <getKeyInput+0xaa>
            break;
 8000522:	bf00      	nop
 8000524:	e000      	b.n	8000528 <getKeyInput+0xac>
            break;
 8000526:	bf00      	nop
    }

	KeyReg2_2 = KeyReg1_2;
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <getKeyInput+0x244>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a65      	ldr	r2, [pc, #404]	; (80006c4 <getKeyInput+0x248>)
 800052e:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg0_2;
 8000530:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <getKeyInput+0x24c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a62      	ldr	r2, [pc, #392]	; (80006c0 <getKeyInput+0x244>)
 8000536:	6013      	str	r3, [r2, #0]
	KeyReg0_2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 8000538:	2104      	movs	r1, #4
 800053a:	485f      	ldr	r0, [pc, #380]	; (80006b8 <getKeyInput+0x23c>)
 800053c:	f001 f980 	bl	8001840 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <getKeyInput+0x24c>)
 8000546:	601a      	str	r2, [r3, #0]

	int keyState2 = (KeyReg0_2 == KeyReg1_2) && (KeyReg0_2 == KeyReg2_2);
 8000548:	4b5f      	ldr	r3, [pc, #380]	; (80006c8 <getKeyInput+0x24c>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b5c      	ldr	r3, [pc, #368]	; (80006c0 <getKeyInput+0x244>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d107      	bne.n	8000564 <getKeyInput+0xe8>
 8000554:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <getKeyInput+0x24c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b5a      	ldr	r3, [pc, #360]	; (80006c4 <getKeyInput+0x248>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d101      	bne.n	8000564 <getKeyInput+0xe8>
 8000560:	2301      	movs	r3, #1
 8000562:	e000      	b.n	8000566 <getKeyInput+0xea>
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]

	switch (keyState2)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d017      	beq.n	800059e <getKeyInput+0x122>
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d12c      	bne.n	80005ce <getKeyInput+0x152>
	{
		case 1: // Key is stable
			if (KeyReg2_2 == PRESSED_STATE)
 8000574:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <getKeyInput+0x248>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d125      	bne.n	80005c8 <getKeyInput+0x14c>
			{
				if (TimeOutForKeyPress2 == 0)
 800057c:	4b53      	ldr	r3, [pc, #332]	; (80006cc <getKeyInput+0x250>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d106      	bne.n	8000592 <getKeyInput+0x116>
				{
					subLongKeyProcess(2);
 8000584:	2002      	movs	r0, #2
 8000586:	f7ff ff51 	bl	800042c <subLongKeyProcess>
					TimeOutForKeyPress2 = 150;
 800058a:	4b50      	ldr	r3, [pc, #320]	; (80006cc <getKeyInput+0x250>)
 800058c:	2296      	movs	r2, #150	; 0x96
 800058e:	601a      	str	r2, [r3, #0]
				else
				{
					TimeOutForKeyPress2--;
				}
			}
			break;
 8000590:	e01a      	b.n	80005c8 <getKeyInput+0x14c>
					TimeOutForKeyPress2--;
 8000592:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <getKeyInput+0x250>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3b01      	subs	r3, #1
 8000598:	4a4c      	ldr	r2, [pc, #304]	; (80006cc <getKeyInput+0x250>)
 800059a:	6013      	str	r3, [r2, #0]
			break;
 800059c:	e014      	b.n	80005c8 <getKeyInput+0x14c>
		case 0: // Key state is changing
			if (KeyReg0_2 != KeyReg1_2)
 800059e:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <getKeyInput+0x24c>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <getKeyInput+0x244>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d010      	beq.n	80005cc <getKeyInput+0x150>
			{
				KeyReg1_2 = KeyReg0_2;
 80005aa:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <getKeyInput+0x24c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a44      	ldr	r2, [pc, #272]	; (80006c0 <getKeyInput+0x244>)
 80005b0:	6013      	str	r3, [r2, #0]
				if (KeyReg1_2 == PRESSED_STATE)
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <getKeyInput+0x244>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d108      	bne.n	80005cc <getKeyInput+0x150>
				{
					TimeOutForKeyPress2 = 150;
 80005ba:	4b44      	ldr	r3, [pc, #272]	; (80006cc <getKeyInput+0x250>)
 80005bc:	2296      	movs	r2, #150	; 0x96
 80005be:	601a      	str	r2, [r3, #0]
					subKeyProcess(2);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f7ff ff0b 	bl	80003dc <subKeyProcess>
				}
			}
			break;
 80005c6:	e001      	b.n	80005cc <getKeyInput+0x150>
			break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <getKeyInput+0x152>
			break;
 80005cc:	bf00      	nop
	}

	KeyReg2_3 = KeyReg1_3;
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <getKeyInput+0x254>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a40      	ldr	r2, [pc, #256]	; (80006d4 <getKeyInput+0x258>)
 80005d4:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg0_3;
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <getKeyInput+0x25c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a3d      	ldr	r2, [pc, #244]	; (80006d0 <getKeyInput+0x254>)
 80005dc:	6013      	str	r3, [r2, #0]
	KeyReg0_3 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 80005de:	2108      	movs	r1, #8
 80005e0:	4835      	ldr	r0, [pc, #212]	; (80006b8 <getKeyInput+0x23c>)
 80005e2:	f001 f92d 	bl	8001840 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <getKeyInput+0x25c>)
 80005ec:	601a      	str	r2, [r3, #0]

	int keyState3 = (KeyReg0_3 == KeyReg1_3) && (KeyReg0_3 == KeyReg2_3);
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <getKeyInput+0x25c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <getKeyInput+0x254>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d107      	bne.n	800060a <getKeyInput+0x18e>
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <getKeyInput+0x25c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <getKeyInput+0x258>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d101      	bne.n	800060a <getKeyInput+0x18e>
 8000606:	2301      	movs	r3, #1
 8000608:	e000      	b.n	800060c <getKeyInput+0x190>
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]

	switch (keyState3)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d017      	beq.n	8000644 <getKeyInput+0x1c8>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d12c      	bne.n	8000674 <getKeyInput+0x1f8>
	{
		case 1: // Key is stable
			if (KeyReg2_3 == PRESSED_STATE)
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <getKeyInput+0x258>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d125      	bne.n	800066e <getKeyInput+0x1f2>
			{
				if (TimeOutForKeyPress3 == 0)
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <getKeyInput+0x260>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d106      	bne.n	8000638 <getKeyInput+0x1bc>
				{
					subLongKeyProcess(3);
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff fefe 	bl	800042c <subLongKeyProcess>
					TimeOutForKeyPress3 = 150;
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <getKeyInput+0x260>)
 8000632:	2296      	movs	r2, #150	; 0x96
 8000634:	601a      	str	r2, [r3, #0]
				else
				{
					TimeOutForKeyPress3--;
				}
			}
			break;
 8000636:	e01a      	b.n	800066e <getKeyInput+0x1f2>
					TimeOutForKeyPress3--;
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <getKeyInput+0x260>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <getKeyInput+0x260>)
 8000640:	6013      	str	r3, [r2, #0]
			break;
 8000642:	e014      	b.n	800066e <getKeyInput+0x1f2>
		case 0: // Key state is changing
			if (KeyReg0_3 != KeyReg1_3)
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <getKeyInput+0x25c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <getKeyInput+0x254>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d010      	beq.n	8000672 <getKeyInput+0x1f6>
			{
				KeyReg1_3 = KeyReg0_3;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <getKeyInput+0x25c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <getKeyInput+0x254>)
 8000656:	6013      	str	r3, [r2, #0]
				if (KeyReg1_3 == PRESSED_STATE)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <getKeyInput+0x254>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d108      	bne.n	8000672 <getKeyInput+0x1f6>
				{
					TimeOutForKeyPress3 = 150;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <getKeyInput+0x260>)
 8000662:	2296      	movs	r2, #150	; 0x96
 8000664:	601a      	str	r2, [r3, #0]
					subKeyProcess(3);
 8000666:	2003      	movs	r0, #3
 8000668:	f7ff feb8 	bl	80003dc <subKeyProcess>
				}
			}
			break;
 800066c:	e001      	b.n	8000672 <getKeyInput+0x1f6>
			break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <getKeyInput+0x1f8>
			break;
 8000672:	bf00      	nop
	}

    if (KeyReg3_1 == PRESSED_STATE || KeyReg3_2 == PRESSED_STATE || KeyReg3_3 == PRESSED_STATE)
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <getKeyInput+0x264>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d007      	beq.n	800068c <getKeyInput+0x210>
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <getKeyInput+0x268>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <getKeyInput+0x210>
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <getKeyInput+0x26c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <getKeyInput+0x21c>
    {
    	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <getKeyInput+0x23c>)
 8000692:	f001 f8ec 	bl	800186e <HAL_GPIO_WritePin>
 8000696:	e005      	b.n	80006a4 <getKeyInput+0x228>
    }
    else
    {
    	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <getKeyInput+0x23c>)
 800069e:	f001 f8e6 	bl	800186e <HAL_GPIO_WritePin>
    }
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000004 	.word	0x20000004
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000000 	.word	0x20000000
 80006b8:	40010800 	.word	0x40010800
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000014 	.word	0x20000014
 80006c4:	20000018 	.word	0x20000018
 80006c8:	20000010 	.word	0x20000010
 80006cc:	20000034 	.word	0x20000034
 80006d0:	20000024 	.word	0x20000024
 80006d4:	20000028 	.word	0x20000028
 80006d8:	20000020 	.word	0x20000020
 80006dc:	20000038 	.word	0x20000038
 80006e0:	2000000c 	.word	0x2000000c
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	2000002c 	.word	0x2000002c

080006ec <fsm_auto_run>:
 */

#include "fsm_auto.h"

void fsm_auto_run()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	switch(status)
 80006f0:	4b83      	ldr	r3, [pc, #524]	; (8000900 <fsm_auto_run+0x214>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	f200 8101 	bhi.w	80008fc <fsm_auto_run+0x210>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <fsm_auto_run+0x14>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000715 	.word	0x08000715
 8000704:	0800073b 	.word	0x0800073b
 8000708:	080007a9 	.word	0x080007a9
 800070c:	08000819 	.word	0x08000819
 8000710:	08000887 	.word	0x08000887
	{
		case INIT:
			ledReset();
 8000714:	f000 fb24 	bl	8000d60 <ledReset>
			status = 1;
 8000718:	4b79      	ldr	r3, [pc, #484]	; (8000900 <fsm_auto_run+0x214>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 800071e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fc9e 	bl	8001064 <setTimer>
			setTimer(1, 250);
 8000728:	21fa      	movs	r1, #250	; 0xfa
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fc9a 	bl	8001064 <setTimer>
			count = duration_G;
 8000730:	4b74      	ldr	r3, [pc, #464]	; (8000904 <fsm_auto_run+0x218>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a74      	ldr	r2, [pc, #464]	; (8000908 <fsm_auto_run+0x21c>)
 8000736:	6013      	str	r3, [r2, #0]
			break;
 8000738:	e0e0      	b.n	80008fc <fsm_auto_run+0x210>
		case GREEN_RED:
			ledGreen_Red();
 800073a:	f000 fb5d 	bl	8000df8 <ledGreen_Red>
			if (timer_flag[1] == 1)
 800073e:	4b73      	ldr	r3, [pc, #460]	; (800090c <fsm_auto_run+0x220>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d110      	bne.n	8000768 <fsm_auto_run+0x7c>
			{
				display7SEG_Auto(count, count + duration_Y);
 8000746:	4b70      	ldr	r3, [pc, #448]	; (8000908 <fsm_auto_run+0x21c>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <fsm_auto_run+0x21c>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b70      	ldr	r3, [pc, #448]	; (8000910 <fsm_auto_run+0x224>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4619      	mov	r1, r3
 8000756:	f7ff fdc1 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 800075a:	4b6c      	ldr	r3, [pc, #432]	; (800090c <fsm_auto_run+0x220>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000760:	21fa      	movs	r1, #250	; 0xfa
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fc7e 	bl	8001064 <setTimer>
			}
			if (timer_flag[0] == 1)
 8000768:	4b68      	ldr	r3, [pc, #416]	; (800090c <fsm_auto_run+0x220>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	f040 80be 	bne.w	80008ee <fsm_auto_run+0x202>
			{
				count--;
 8000772:	4b65      	ldr	r3, [pc, #404]	; (8000908 <fsm_auto_run+0x21c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a63      	ldr	r2, [pc, #396]	; (8000908 <fsm_auto_run+0x21c>)
 800077a:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 800077c:	4b62      	ldr	r3, [pc, #392]	; (8000908 <fsm_auto_run+0x21c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dc08      	bgt.n	8000796 <fsm_auto_run+0xaa>
				{
					ledReset();
 8000784:	f000 faec 	bl	8000d60 <ledReset>
					status = 2;
 8000788:	4b5d      	ldr	r3, [pc, #372]	; (8000900 <fsm_auto_run+0x214>)
 800078a:	2202      	movs	r2, #2
 800078c:	601a      	str	r2, [r3, #0]
					count = duration_Y;
 800078e:	4b60      	ldr	r3, [pc, #384]	; (8000910 <fsm_auto_run+0x224>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a5d      	ldr	r2, [pc, #372]	; (8000908 <fsm_auto_run+0x21c>)
 8000794:	6013      	str	r3, [r2, #0]
				}
				timer_flag[0] = 0;
 8000796:	4b5d      	ldr	r3, [pc, #372]	; (800090c <fsm_auto_run+0x220>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 800079c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fc5f 	bl	8001064 <setTimer>
			}
			break;
 80007a6:	e0a2      	b.n	80008ee <fsm_auto_run+0x202>
		case YELLOW_RED:
			ledYellow_Red();
 80007a8:	f000 fb38 	bl	8000e1c <ledYellow_Red>
			if (timer_flag[1] == 1)
 80007ac:	4b57      	ldr	r3, [pc, #348]	; (800090c <fsm_auto_run+0x220>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10e      	bne.n	80007d2 <fsm_auto_run+0xe6>
			{
				display7SEG_Auto(count, count);
 80007b4:	4b54      	ldr	r3, [pc, #336]	; (8000908 <fsm_auto_run+0x21c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a53      	ldr	r2, [pc, #332]	; (8000908 <fsm_auto_run+0x21c>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd8c 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 80007c4:	4b51      	ldr	r3, [pc, #324]	; (800090c <fsm_auto_run+0x220>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 80007ca:	21fa      	movs	r1, #250	; 0xfa
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fc49 	bl	8001064 <setTimer>
			}
			if (timer_flag[0] == 1)
 80007d2:	4b4e      	ldr	r3, [pc, #312]	; (800090c <fsm_auto_run+0x220>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f040 808b 	bne.w	80008f2 <fsm_auto_run+0x206>
			{
				count--;
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <fsm_auto_run+0x21c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4a49      	ldr	r2, [pc, #292]	; (8000908 <fsm_auto_run+0x21c>)
 80007e4:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <fsm_auto_run+0x21c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dc0b      	bgt.n	8000806 <fsm_auto_run+0x11a>
				{
					ledReset();
 80007ee:	f000 fab7 	bl	8000d60 <ledReset>
					status = 3;
 80007f2:	4b43      	ldr	r3, [pc, #268]	; (8000900 <fsm_auto_run+0x214>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	601a      	str	r2, [r3, #0]
					count = duration_R - duration_Y;
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <fsm_auto_run+0x228>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b44      	ldr	r3, [pc, #272]	; (8000910 <fsm_auto_run+0x224>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	4a41      	ldr	r2, [pc, #260]	; (8000908 <fsm_auto_run+0x21c>)
 8000804:	6013      	str	r3, [r2, #0]
				}

				timer_flag[0] = 0;
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <fsm_auto_run+0x220>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 800080c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fc27 	bl	8001064 <setTimer>
			}
			break;
 8000816:	e06c      	b.n	80008f2 <fsm_auto_run+0x206>
		case RED_GREEN:
			ledRed_Green();
 8000818:	f000 faca 	bl	8000db0 <ledRed_Green>
			if (timer_flag[1] == 1)
 800081c:	4b3b      	ldr	r3, [pc, #236]	; (800090c <fsm_auto_run+0x220>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d111      	bne.n	8000848 <fsm_auto_run+0x15c>
			{
				display7SEG_Auto(count + duration_Y, count);
 8000824:	4b38      	ldr	r3, [pc, #224]	; (8000908 <fsm_auto_run+0x21c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <fsm_auto_run+0x224>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4413      	add	r3, r2
 800082e:	4a36      	ldr	r2, [pc, #216]	; (8000908 <fsm_auto_run+0x21c>)
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd51 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <fsm_auto_run+0x220>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000840:	21fa      	movs	r1, #250	; 0xfa
 8000842:	2001      	movs	r0, #1
 8000844:	f000 fc0e 	bl	8001064 <setTimer>
			}
			if (timer_flag[0] == 1)
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <fsm_auto_run+0x220>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d152      	bne.n	80008f6 <fsm_auto_run+0x20a>
			{
				count--;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <fsm_auto_run+0x21c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3b01      	subs	r3, #1
 8000856:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <fsm_auto_run+0x21c>)
 8000858:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <fsm_auto_run+0x21c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	dc08      	bgt.n	8000874 <fsm_auto_run+0x188>
				{
					ledReset();
 8000862:	f000 fa7d 	bl	8000d60 <ledReset>
					status = 4;
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <fsm_auto_run+0x214>)
 8000868:	2204      	movs	r2, #4
 800086a:	601a      	str	r2, [r3, #0]
					count = duration_Y;
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <fsm_auto_run+0x224>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a25      	ldr	r2, [pc, #148]	; (8000908 <fsm_auto_run+0x21c>)
 8000872:	6013      	str	r3, [r2, #0]
				}
				timer_flag[0] = 0;
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <fsm_auto_run+0x220>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 800087a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fbf0 	bl	8001064 <setTimer>
			}
			break;
 8000884:	e037      	b.n	80008f6 <fsm_auto_run+0x20a>
		case RED_YELLOW:
			ledRed_Yellow();
 8000886:	f000 faa5 	bl	8000dd4 <ledRed_Yellow>
			if (timer_flag[1] == 1)
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <fsm_auto_run+0x220>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10e      	bne.n	80008b0 <fsm_auto_run+0x1c4>
			{
				display7SEG_Auto(count, count);
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <fsm_auto_run+0x21c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <fsm_auto_run+0x21c>)
 8000898:	6812      	ldr	r2, [r2, #0]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd1d 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <fsm_auto_run+0x220>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 80008a8:	21fa      	movs	r1, #250	; 0xfa
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fbda 	bl	8001064 <setTimer>
			}
			if (timer_flag[0] == 1)
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <fsm_auto_run+0x220>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d120      	bne.n	80008fa <fsm_auto_run+0x20e>
			{
				count--;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <fsm_auto_run+0x21c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3b01      	subs	r3, #1
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <fsm_auto_run+0x21c>)
 80008c0:	6013      	str	r3, [r2, #0]
				if (count <= 0)
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <fsm_auto_run+0x21c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dc08      	bgt.n	80008dc <fsm_auto_run+0x1f0>
				{
					ledReset();
 80008ca:	f000 fa49 	bl	8000d60 <ledReset>
					status = 1;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <fsm_auto_run+0x214>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
					count = duration_G;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <fsm_auto_run+0x218>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <fsm_auto_run+0x21c>)
 80008da:	6013      	str	r3, [r2, #0]
				}

				timer_flag[0] = 0;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <fsm_auto_run+0x220>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
				setTimer(0, 1000);
 80008e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 fbbc 	bl	8001064 <setTimer>
			}
			break;
 80008ec:	e005      	b.n	80008fa <fsm_auto_run+0x20e>
			break;
 80008ee:	bf00      	nop
 80008f0:	e004      	b.n	80008fc <fsm_auto_run+0x210>
			break;
 80008f2:	bf00      	nop
 80008f4:	e002      	b.n	80008fc <fsm_auto_run+0x210>
			break;
 80008f6:	bf00      	nop
 80008f8:	e000      	b.n	80008fc <fsm_auto_run+0x210>
			break;
 80008fa:	bf00      	nop
	}
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000078 	.word	0x20000078
 8000904:	20000040 	.word	0x20000040
 8000908:	20000080 	.word	0x20000080
 800090c:	2000010c 	.word	0x2000010c
 8000910:	20000048 	.word	0x20000048
 8000914:	20000044 	.word	0x20000044

08000918 <fsm_edit>:
 */

#include <fsm_edit.h>

void fsm_edit()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	switch (status)
 800091c:	4bab      	ldr	r3, [pc, #684]	; (8000bcc <fsm_edit+0x2b4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3b05      	subs	r3, #5
 8000922:	2b08      	cmp	r3, #8
 8000924:	f200 81b1 	bhi.w	8000c8a <fsm_edit+0x372>
 8000928:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <fsm_edit+0x18>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	08000b55 	.word	0x08000b55
 8000934:	08000b91 	.word	0x08000b91
 8000938:	08000bf9 	.word	0x08000bf9
 800093c:	08000c35 	.word	0x08000c35
 8000940:	08000c8b 	.word	0x08000c8b
 8000944:	08000c8b 	.word	0x08000c8b
 8000948:	08000955 	.word	0x08000955
 800094c:	080009ff 	.word	0x080009ff
 8000950:	08000aa9 	.word	0x08000aa9
	{
		case EDIT_RED:
			if (isButton2Pressed() == 1 || isButton2LongPressed() == 1)
 8000954:	f7ff fd02 	bl	800035c <isButton2Pressed>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d004      	beq.n	8000968 <fsm_edit+0x50>
 800095e:	f7ff fd1d 	bl	800039c <isButton2LongPressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10a      	bne.n	800097e <fsm_edit+0x66>
			{
				duration_ADD++;
 8000968:	4b99      	ldr	r3, [pc, #612]	; (8000bd0 <fsm_edit+0x2b8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a98      	ldr	r2, [pc, #608]	; (8000bd0 <fsm_edit+0x2b8>)
 8000970:	6013      	str	r3, [r2, #0]
				button2_flag = 0;
 8000972:	4b98      	ldr	r3, [pc, #608]	; (8000bd4 <fsm_edit+0x2bc>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
				button2_long_pressed = 0;
 8000978:	4b97      	ldr	r3, [pc, #604]	; (8000bd8 <fsm_edit+0x2c0>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1)
 800097e:	4b97      	ldr	r3, [pc, #604]	; (8000bdc <fsm_edit+0x2c4>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d118      	bne.n	80009b8 <fsm_edit+0xa0>
			{
				HAL_GPIO_TogglePin(LR_GPIO_Port, LR_Pin);
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4895      	ldr	r0, [pc, #596]	; (8000be0 <fsm_edit+0x2c8>)
 800098a:	f000 ff88 	bl	800189e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LR1_GPIO_Port, LR1_Pin);
 800098e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000992:	4893      	ldr	r0, [pc, #588]	; (8000be0 <fsm_edit+0x2c8>)
 8000994:	f000 ff83 	bl	800189e <HAL_GPIO_TogglePin>
				display7SEG_Auto(duration_R + duration_ADD, 2);
 8000998:	4b92      	ldr	r3, [pc, #584]	; (8000be4 <fsm_edit+0x2cc>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b8c      	ldr	r3, [pc, #560]	; (8000bd0 <fsm_edit+0x2b8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc99 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 80009aa:	4b8c      	ldr	r3, [pc, #560]	; (8000bdc <fsm_edit+0x2c4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 80009b0:	21fa      	movs	r1, #250	; 0xfa
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fb56 	bl	8001064 <setTimer>
			}
			if (isButton3Pressed() == 1)
 80009b8:	f7ff fce0 	bl	800037c <isButton3Pressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d113      	bne.n	80009ea <fsm_edit+0xd2>
			{
				duration_R += duration_ADD;
 80009c2:	4b88      	ldr	r3, [pc, #544]	; (8000be4 <fsm_edit+0x2cc>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b82      	ldr	r3, [pc, #520]	; (8000bd0 <fsm_edit+0x2b8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a85      	ldr	r2, [pc, #532]	; (8000be4 <fsm_edit+0x2cc>)
 80009ce:	6013      	str	r3, [r2, #0]
				if (duration_R > 99)
 80009d0:	4b84      	ldr	r3, [pc, #528]	; (8000be4 <fsm_edit+0x2cc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b63      	cmp	r3, #99	; 0x63
 80009d6:	dd02      	ble.n	80009de <fsm_edit+0xc6>
				{
					duration_R = 1;
 80009d8:	4b82      	ldr	r3, [pc, #520]	; (8000be4 <fsm_edit+0x2cc>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
				}
				duration_ADD = 0;
 80009de:	4b7c      	ldr	r3, [pc, #496]	; (8000bd0 <fsm_edit+0x2b8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 80009e4:	4b80      	ldr	r3, [pc, #512]	; (8000be8 <fsm_edit+0x2d0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
			}
			if (isButton1Pressed() == 1)
 80009ea:	f7ff fca7 	bl	800033c <isButton1Pressed>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	f040 813d 	bne.w	8000c70 <fsm_edit+0x358>
			{
				duration_ADD = 0;
 80009f6:	4b76      	ldr	r3, [pc, #472]	; (8000bd0 <fsm_edit+0x2b8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80009fc:	e138      	b.n	8000c70 <fsm_edit+0x358>
		case EDIT_YELLOW:
			if (isButton2Pressed() == 1 || isButton2LongPressed() == 1)
 80009fe:	f7ff fcad 	bl	800035c <isButton2Pressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d004      	beq.n	8000a12 <fsm_edit+0xfa>
 8000a08:	f7ff fcc8 	bl	800039c <isButton2LongPressed>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10a      	bne.n	8000a28 <fsm_edit+0x110>
			{
				duration_ADD++;
 8000a12:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <fsm_edit+0x2b8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a6d      	ldr	r2, [pc, #436]	; (8000bd0 <fsm_edit+0x2b8>)
 8000a1a:	6013      	str	r3, [r2, #0]

				button2_flag = 0;
 8000a1c:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <fsm_edit+0x2bc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
				button2_long_pressed = 0;
 8000a22:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <fsm_edit+0x2c0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1)
 8000a28:	4b6c      	ldr	r3, [pc, #432]	; (8000bdc <fsm_edit+0x2c4>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d118      	bne.n	8000a62 <fsm_edit+0x14a>
			{
				HAL_GPIO_TogglePin(LY_GPIO_Port, LY_Pin);
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	486b      	ldr	r0, [pc, #428]	; (8000be0 <fsm_edit+0x2c8>)
 8000a34:	f000 ff33 	bl	800189e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LY1_GPIO_Port, LY1_Pin);
 8000a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3c:	4868      	ldr	r0, [pc, #416]	; (8000be0 <fsm_edit+0x2c8>)
 8000a3e:	f000 ff2e 	bl	800189e <HAL_GPIO_TogglePin>
				display7SEG_Auto(duration_Y + duration_ADD, 3);
 8000a42:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <fsm_edit+0x2d4>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <fsm_edit+0x2b8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fc44 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 8000a54:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <fsm_edit+0x2c4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000a5a:	21fa      	movs	r1, #250	; 0xfa
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fb01 	bl	8001064 <setTimer>
			}
			if (isButton3Pressed() == 1)
 8000a62:	f7ff fc8b 	bl	800037c <isButton3Pressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d113      	bne.n	8000a94 <fsm_edit+0x17c>
			{
				duration_Y += duration_ADD;
 8000a6c:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <fsm_edit+0x2d4>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <fsm_edit+0x2b8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a5d      	ldr	r2, [pc, #372]	; (8000bec <fsm_edit+0x2d4>)
 8000a78:	6013      	str	r3, [r2, #0]
				if (duration_Y > 99)
 8000a7a:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <fsm_edit+0x2d4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b63      	cmp	r3, #99	; 0x63
 8000a80:	dd02      	ble.n	8000a88 <fsm_edit+0x170>
				{
					duration_Y = 1;
 8000a82:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <fsm_edit+0x2d4>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
				}
				duration_ADD = 0;
 8000a88:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <fsm_edit+0x2b8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000a8e:	4b56      	ldr	r3, [pc, #344]	; (8000be8 <fsm_edit+0x2d0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			}
			if (isButton1Pressed() == 1)
 8000a94:	f7ff fc52 	bl	800033c <isButton1Pressed>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	f040 80ea 	bne.w	8000c74 <fsm_edit+0x35c>
			{
				duration_ADD = 0;
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <fsm_edit+0x2b8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aa6:	e0e5      	b.n	8000c74 <fsm_edit+0x35c>
		case EDIT_GREEN:
			if (isButton2Pressed() == 1 || isButton2LongPressed() == 1)
 8000aa8:	f7ff fc58 	bl	800035c <isButton2Pressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d004      	beq.n	8000abc <fsm_edit+0x1a4>
 8000ab2:	f7ff fc73 	bl	800039c <isButton2LongPressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d10a      	bne.n	8000ad2 <fsm_edit+0x1ba>
			{
				duration_ADD++;
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <fsm_edit+0x2b8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a43      	ldr	r2, [pc, #268]	; (8000bd0 <fsm_edit+0x2b8>)
 8000ac4:	6013      	str	r3, [r2, #0]
				button2_flag = 0;
 8000ac6:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <fsm_edit+0x2bc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
				button2_long_pressed = 0;
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <fsm_edit+0x2c0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1)
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <fsm_edit+0x2c4>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d119      	bne.n	8000b0e <fsm_edit+0x1f6>
			{
				HAL_GPIO_TogglePin(LG_GPIO_Port, LG_Pin);
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	4840      	ldr	r0, [pc, #256]	; (8000be0 <fsm_edit+0x2c8>)
 8000ae0:	f000 fedd 	bl	800189e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LG1_GPIO_Port, LG1_Pin);
 8000ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae8:	483d      	ldr	r0, [pc, #244]	; (8000be0 <fsm_edit+0x2c8>)
 8000aea:	f000 fed8 	bl	800189e <HAL_GPIO_TogglePin>
				display7SEG_Auto(duration_G + duration_ADD, 4);
 8000aee:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <fsm_edit+0x2d8>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <fsm_edit+0x2b8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	2104      	movs	r1, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fbee 	bl	80002dc <display7SEG_Auto>
				timer_flag[1] = 0;
 8000b00:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <fsm_edit+0x2c4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
				setTimer(1,250);
 8000b06:	21fa      	movs	r1, #250	; 0xfa
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 faab 	bl	8001064 <setTimer>
			}
			if (isButton3Pressed() == 1)
 8000b0e:	f7ff fc35 	bl	800037c <isButton3Pressed>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d113      	bne.n	8000b40 <fsm_edit+0x228>
			{
				duration_G += duration_ADD;
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <fsm_edit+0x2d8>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <fsm_edit+0x2b8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <fsm_edit+0x2d8>)
 8000b24:	6013      	str	r3, [r2, #0]
				if (duration_G > 99)
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <fsm_edit+0x2d8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b63      	cmp	r3, #99	; 0x63
 8000b2c:	dd02      	ble.n	8000b34 <fsm_edit+0x21c>
				{
					duration_G = 1;
 8000b2e:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <fsm_edit+0x2d8>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
				}
				duration_ADD = 0;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <fsm_edit+0x2b8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <fsm_edit+0x2d0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
			}
			if (isButton1Pressed() == 1)
 8000b40:	f7ff fbfc 	bl	800033c <isButton1Pressed>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	f040 8096 	bne.w	8000c78 <fsm_edit+0x360>
			{
				duration_ADD = 0;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <fsm_edit+0x2b8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b52:	e091      	b.n	8000c78 <fsm_edit+0x360>
		case MAN_GREEN_RED:
			ledGreen_Red();
 8000b54:	f000 f950 	bl	8000df8 <ledGreen_Red>
			if (isButton3Pressed() == 1)
 8000b58:	f7ff fc10 	bl	800037c <isButton3Pressed>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d107      	bne.n	8000b72 <fsm_edit+0x25a>
			{
				ledReset();
 8000b62:	f000 f8fd 	bl	8000d60 <ledReset>
				status = 6;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <fsm_edit+0x2b4>)
 8000b68:	2206      	movs	r2, #6
 8000b6a:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <fsm_edit+0x2d0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000b72:	f7ff fbf3 	bl	800035c <isButton2Pressed>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d17f      	bne.n	8000c7c <fsm_edit+0x364>
			{
				status = 0;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <fsm_edit+0x2b4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <fsm_edit+0x2dc>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <fsm_edit+0x2bc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b8e:	e075      	b.n	8000c7c <fsm_edit+0x364>
		case MAN_YELLOW_RED:
			ledYellow_Red();
 8000b90:	f000 f944 	bl	8000e1c <ledYellow_Red>
			if (isButton3Pressed() == 1)
 8000b94:	f7ff fbf2 	bl	800037c <isButton3Pressed>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d107      	bne.n	8000bae <fsm_edit+0x296>
			{
				ledReset();
 8000b9e:	f000 f8df 	bl	8000d60 <ledReset>
				status = 7;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <fsm_edit+0x2b4>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <fsm_edit+0x2d0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000bae:	f7ff fbd5 	bl	800035c <isButton2Pressed>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d163      	bne.n	8000c80 <fsm_edit+0x368>
			{
				status = 0;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <fsm_edit+0x2b4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <fsm_edit+0x2dc>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <fsm_edit+0x2bc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bca:	e059      	b.n	8000c80 <fsm_edit+0x368>
 8000bcc:	20000078 	.word	0x20000078
 8000bd0:	2000007c 	.word	0x2000007c
 8000bd4:	20000094 	.word	0x20000094
 8000bd8:	20000088 	.word	0x20000088
 8000bdc:	2000010c 	.word	0x2000010c
 8000be0:	40010800 	.word	0x40010800
 8000be4:	20000044 	.word	0x20000044
 8000be8:	20000098 	.word	0x20000098
 8000bec:	20000048 	.word	0x20000048
 8000bf0:	20000040 	.word	0x20000040
 8000bf4:	2000003c 	.word	0x2000003c
		case MAN_RED_GREEN:
			ledRed_Green();
 8000bf8:	f000 f8da 	bl	8000db0 <ledRed_Green>
			if (isButton3Pressed() == 1)
 8000bfc:	f7ff fbbe 	bl	800037c <isButton3Pressed>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d107      	bne.n	8000c16 <fsm_edit+0x2fe>
			{
				ledReset();
 8000c06:	f000 f8ab 	bl	8000d60 <ledReset>
				status = 8;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <fsm_edit+0x378>)
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <fsm_edit+0x37c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000c16:	f7ff fba1 	bl	800035c <isButton2Pressed>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d131      	bne.n	8000c84 <fsm_edit+0x36c>
			{
				status = 0;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <fsm_edit+0x378>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <fsm_edit+0x380>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <fsm_edit+0x384>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c32:	e027      	b.n	8000c84 <fsm_edit+0x36c>
		case MAN_RED_YELLOW:
			ledRed_Yellow();
 8000c34:	f000 f8ce 	bl	8000dd4 <ledRed_Yellow>
			if (isButton3Pressed() == 1)
 8000c38:	f7ff fba0 	bl	800037c <isButton3Pressed>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d107      	bne.n	8000c52 <fsm_edit+0x33a>
			{
				ledReset();
 8000c42:	f000 f88d 	bl	8000d60 <ledReset>
				status = 5;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <fsm_edit+0x378>)
 8000c48:	2205      	movs	r2, #5
 8000c4a:	601a      	str	r2, [r3, #0]
				button3_flag = 0;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <fsm_edit+0x37c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
			}
			if (isButton2Pressed() == 1)
 8000c52:	f7ff fb83 	bl	800035c <isButton2Pressed>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d115      	bne.n	8000c88 <fsm_edit+0x370>
			{
				status = 0;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <fsm_edit+0x378>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <fsm_edit+0x380>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
				button2_flag = 0;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <fsm_edit+0x384>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c6e:	e00b      	b.n	8000c88 <fsm_edit+0x370>
			break;
 8000c70:	bf00      	nop
 8000c72:	e00a      	b.n	8000c8a <fsm_edit+0x372>
			break;
 8000c74:	bf00      	nop
 8000c76:	e008      	b.n	8000c8a <fsm_edit+0x372>
			break;
 8000c78:	bf00      	nop
 8000c7a:	e006      	b.n	8000c8a <fsm_edit+0x372>
			break;
 8000c7c:	bf00      	nop
 8000c7e:	e004      	b.n	8000c8a <fsm_edit+0x372>
			break;
 8000c80:	bf00      	nop
 8000c82:	e002      	b.n	8000c8a <fsm_edit+0x372>
			break;
 8000c84:	bf00      	nop
 8000c86:	e000      	b.n	8000c8a <fsm_edit+0x372>
			break;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000078 	.word	0x20000078
 8000c94:	20000098 	.word	0x20000098
 8000c98:	2000003c 	.word	0x2000003c
 8000c9c:	20000094 	.word	0x20000094

08000ca0 <changeMode>:

#include <fsm_setting.h>
int mode = 1;

void changeMode()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	mode++;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <changeMode+0x6c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <changeMode+0x6c>)
 8000cac:	6013      	str	r3, [r2, #0]
	if (mode >= 5)
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <changeMode+0x6c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	dd02      	ble.n	8000cbc <changeMode+0x1c>
	{
		mode = 1;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <changeMode+0x6c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <changeMode+0x6c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d820      	bhi.n	8000d08 <changeMode+0x68>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <changeMode+0x2c>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000ce5 	.word	0x08000ce5
 8000cd4:	08000cf1 	.word	0x08000cf1
 8000cd8:	08000cfd 	.word	0x08000cfd
	{
		case 1:
			status = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <changeMode+0x70>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
			break;
 8000ce2:	e011      	b.n	8000d08 <changeMode+0x68>
		case 2:
			ledReset();
 8000ce4:	f000 f83c 	bl	8000d60 <ledReset>
			status = 11;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <changeMode+0x70>)
 8000cea:	220b      	movs	r2, #11
 8000cec:	601a      	str	r2, [r3, #0]
			break;
 8000cee:	e00b      	b.n	8000d08 <changeMode+0x68>
		case 3:
			ledReset();
 8000cf0:	f000 f836 	bl	8000d60 <ledReset>
			status = 12;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <changeMode+0x70>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	601a      	str	r2, [r3, #0]
			break;
 8000cfa:	e005      	b.n	8000d08 <changeMode+0x68>
		case 4:
			ledReset();
 8000cfc:	f000 f830 	bl	8000d60 <ledReset>
			status = 13;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <changeMode+0x70>)
 8000d02:	220d      	movs	r2, #13
 8000d04:	601a      	str	r2, [r3, #0]
			break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000003c 	.word	0x2000003c
 8000d10:	20000078 	.word	0x20000078

08000d14 <fsm_config>:

void fsm_config()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	if (isButton1Pressed() == 1)
 8000d18:	f7ff fb10 	bl	800033c <isButton1Pressed>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d107      	bne.n	8000d32 <fsm_config+0x1e>
	{
		changeMode();
 8000d22:	f7ff ffbd 	bl	8000ca0 <changeMode>
		button1_flag = 0;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <fsm_config+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
		button1_long_pressed = 0;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <fsm_config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
	}
	if (isButton3LongPressed() == 1)
 8000d32:	f7ff fb43 	bl	80003bc <isButton3LongPressed>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d107      	bne.n	8000d4c <fsm_config+0x38>
	{
		ledReset();
 8000d3c:	f000 f810 	bl	8000d60 <ledReset>
		status = 5;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <fsm_config+0x44>)
 8000d42:	2205      	movs	r2, #5
 8000d44:	601a      	str	r2, [r3, #0]
		button3_long_pressed = 0;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <fsm_config+0x48>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000090 	.word	0x20000090
 8000d54:	20000084 	.word	0x20000084
 8000d58:	20000078 	.word	0x20000078
 8000d5c:	2000008c 	.word	0x2000008c

08000d60 <ledReset>:
 *      Author: ADMIN
 */
#include "light_traffic.h"

void ledReset()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4810      	ldr	r0, [pc, #64]	; (8000dac <ledReset+0x4c>)
 8000d6a:	f000 fd80 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY_GPIO_Port, LY_Pin, SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <ledReset+0x4c>)
 8000d74:	f000 fd7b 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <ledReset+0x4c>)
 8000d80:	f000 fd75 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR1_GPIO_Port, LR1_Pin, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <ledReset+0x4c>)
 8000d8c:	f000 fd6f 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY1_GPIO_Port, LY1_Pin, SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <ledReset+0x4c>)
 8000d98:	f000 fd69 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG1_GPIO_Port, LG1_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da2:	4802      	ldr	r0, [pc, #8]	; (8000dac <ledReset+0x4c>)
 8000da4:	f000 fd63 	bl	800186e <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010800 	.word	0x40010800

08000db0 <ledRed_Green>:
void ledRed_Green()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <ledRed_Green+0x20>)
 8000dba:	f000 fd58 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG1_GPIO_Port, LG1_Pin, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <ledRed_Green+0x20>)
 8000dc6:	f000 fd52 	bl	800186e <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <ledRed_Yellow>:

void ledRed_Yellow()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <ledRed_Yellow+0x20>)
 8000dde:	f000 fd46 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY1_GPIO_Port, LY1_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <ledRed_Yellow+0x20>)
 8000dea:	f000 fd40 	bl	800186e <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800

08000df8 <ledGreen_Red>:

void ledGreen_Red()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR1_GPIO_Port, LR1_Pin, RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <ledGreen_Red+0x20>)
 8000e04:	f000 fd33 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG_GPIO_Port, LG_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <ledGreen_Red+0x20>)
 8000e10:	f000 fd2d 	bl	800186e <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010800 	.word	0x40010800

08000e1c <ledYellow_Red>:

void ledYellow_Red()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LR1_GPIO_Port, LR1_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ledYellow_Red+0x20>)
 8000e28:	f000 fd21 	bl	800186e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LY_GPIO_Port, LY_Pin, RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <ledYellow_Red+0x20>)
 8000e32:	f000 fd1c 	bl	800186e <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010800 	.word	0x40010800

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fa12 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f810 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f896 	bl	8000f7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e50:	f000 f848 	bl	8000ee4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <main+0x28>)
 8000e56:	f001 f967 	bl	8002128 <HAL_TIM_Base_Start_IT>



  while (1)
  {
	  fsm_auto_run();
 8000e5a:	f7ff fc47 	bl	80006ec <fsm_auto_run>
	  fsm_edit();
 8000e5e:	f7ff fd5b 	bl	8000918 <fsm_edit>
	  fsm_config();
 8000e62:	f7ff ff57 	bl	8000d14 <fsm_config>
	  fsm_auto_run();
 8000e66:	e7f8      	b.n	8000e5a <main+0x1a>
 8000e68:	2000009c 	.word	0x2000009c

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	; 0x40
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fd04 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fd14 	bl	80018d0 <HAL_RCC_OscConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eae:	f000 f8d3 	bl	8001058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 ff80 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f8bf 	bl	8001058 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	; 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f18:	2209      	movs	r2, #9
 8000f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f28:	4813      	ldr	r0, [pc, #76]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f2a:	f001 f8ad 	bl	8002088 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f34:	f000 f890 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f46:	f001 fa2b 	bl	80023a0 <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f50:	f000 f882 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f62:	f001 fc03 	bl	800276c <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f000 f874 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000009c 	.word	0x2000009c

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_T_Pin|LR_Pin|LY_Pin
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000fc6:	481c      	ldr	r0, [pc, #112]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000fc8:	f000 fc51 	bl	800186e <HAL_GPIO_WritePin>
                          |LG_Pin|LR1_Pin|LY1_Pin|LG1_Pin
                          |EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG2_4_Pin
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <MX_GPIO_Init+0xc0>)
 8000fd4:	f000 fc4b 	bl	800186e <HAL_GPIO_WritePin>
                          |SEG2_5_Pin|SEG2_6_Pin|SEG2_7_Pin|SEG1_4_Pin
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG2_1_Pin
                          |SEG2_2_Pin|SEG2_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin;
 8000fd8:	230e      	movs	r3, #14
 8000fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000fec:	f000 faae 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_T_Pin LR_Pin LY_Pin
                           LG_Pin LR1_Pin LY1_Pin LG1_Pin
                           EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_T_Pin|LR_Pin|LY_Pin
 8000ff0:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000ff4:	60bb      	str	r3, [r7, #8]
                          |LG_Pin|LR1_Pin|LY1_Pin|LG1_Pin
                          |EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2302      	movs	r3, #2
 8001000:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <MX_GPIO_Init+0xbc>)
 800100a:	f000 fa9f 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_1_Pin SEG1_2_Pin SEG1_3_Pin SEG2_4_Pin
                           SEG2_5_Pin SEG2_6_Pin SEG2_7_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG2_1_Pin
                           SEG2_2_Pin SEG2_3_Pin */
  GPIO_InitStruct.Pin = SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG2_4_Pin
 800100e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001012:	60bb      	str	r3, [r7, #8]
                          |SEG2_5_Pin|SEG2_6_Pin|SEG2_7_Pin|SEG1_4_Pin
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG2_1_Pin
                          |SEG2_2_Pin|SEG2_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_GPIO_Init+0xc0>)
 8001028:	f000 fa90 	bl	800154c <HAL_GPIO_Init>

}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	40010800 	.word	0x40010800
 800103c:	40010c00 	.word	0x40010c00

08001040 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	timerRun();
 8001048:	f000 f82c 	bl	80010a4 <timerRun>
	getKeyInput();
 800104c:	f7ff fa16 	bl	800047c <getKeyInput>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <setTimer>:
#include <software_timer.h>

int timer_flag[10];
int timer_counter[10];
void setTimer(int index, int counter)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]

	timer_flag[index] = 0;
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <setTimer+0x34>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2100      	movs	r1, #0
 8001074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK; //TICK = 10
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <setTimer+0x38>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1092      	asrs	r2, r2, #2
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	4906      	ldr	r1, [pc, #24]	; (80010a0 <setTimer+0x3c>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	2000010c 	.word	0x2000010c
 800109c:	66666667 	.word	0x66666667
 80010a0:	200000e4 	.word	0x200000e4

080010a4 <timerRun>:

void timerRun()
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e01c      	b.n	80010ea <timerRun+0x46>
	{
		if (timer_counter[i] > 0)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <timerRun+0x58>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd13      	ble.n	80010e4 <timerRun+0x40>
		{
			timer_counter[i]--;
 80010bc:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <timerRun+0x58>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <timerRun+0x58>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0)
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <timerRun+0x58>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc04      	bgt.n	80010e4 <timerRun+0x40>
			{
				timer_flag[i] = 1;
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <timerRun+0x5c>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2101      	movs	r1, #1
 80010e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 10; i++)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3301      	adds	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	dddf      	ble.n	80010b0 <timerRun+0xc>
			}
		}
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	200000e4 	.word	0x200000e4
 8001100:	2000010c 	.word	0x2000010c

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_MspInit+0x5c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_MspInit+0x5c>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6193      	str	r3, [r2, #24]
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_MspInit+0x5c>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x5c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_MspInit+0x5c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x5c>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_MspInit+0x60>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_MspInit+0x60>)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000

08001168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001178:	d113      	bne.n	80011a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_TIM_Base_MspInit+0x44>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_TIM_Base_MspInit+0x44>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x44>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	201c      	movs	r0, #28
 8001198:	f000 f9a1 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800119c:	201c      	movs	r0, #28
 800119e:	f000 f9ba 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f6:	f000 f87f 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <TIM2_IRQHandler+0x10>)
 8001206:	f000 ffdb 	bl	80021c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000009c 	.word	0x2000009c

08001214 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001220:	f7ff fff8 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001226:	490c      	ldr	r1, [pc, #48]	; (8001258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <LoopFillZerobss+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800123c:	4c09      	ldr	r4, [pc, #36]	; (8001264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f001 faf9 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124e:	f7ff fdf7 	bl	8000e40 <main>
  bx lr
 8001252:	4770      	bx	lr
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800125c:	080028e8 	.word	0x080028e8
  ldr r2, =_sbss
 8001260:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001264:	20000138 	.word	0x20000138

08001268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_2_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x28>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f923 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff ff3c 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f93b 	bl	8001532 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f903 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000050 	.word	0x20000050
 80012f0:	20000058 	.word	0x20000058
 80012f4:	20000054 	.word	0x20000054

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_IncTick+0x20>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000058 	.word	0x20000058
 8001318:	20000134 	.word	0x20000134

0800131c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000134 	.word	0x20000134

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2d 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff42 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff35 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e148      	b.n	80017f2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001560:	2201      	movs	r2, #1
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8137 	bne.w	80017ec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4aa3      	ldr	r2, [pc, #652]	; (8001810 <HAL_GPIO_Init+0x2c4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d05e      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001588:	4aa1      	ldr	r2, [pc, #644]	; (8001810 <HAL_GPIO_Init+0x2c4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d875      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800158e:	4aa1      	ldr	r2, [pc, #644]	; (8001814 <HAL_GPIO_Init+0x2c8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d058      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001594:	4a9f      	ldr	r2, [pc, #636]	; (8001814 <HAL_GPIO_Init+0x2c8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d86f      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800159a:	4a9f      	ldr	r2, [pc, #636]	; (8001818 <HAL_GPIO_Init+0x2cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d052      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015a0:	4a9d      	ldr	r2, [pc, #628]	; (8001818 <HAL_GPIO_Init+0x2cc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d869      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015a6:	4a9d      	ldr	r2, [pc, #628]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d04c      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015ac:	4a9b      	ldr	r2, [pc, #620]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d863      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015b2:	4a9b      	ldr	r2, [pc, #620]	; (8001820 <HAL_GPIO_Init+0x2d4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d046      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015b8:	4a99      	ldr	r2, [pc, #612]	; (8001820 <HAL_GPIO_Init+0x2d4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d85d      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d82a      	bhi.n	8001618 <HAL_GPIO_Init+0xcc>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d859      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_GPIO_Init+0x80>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	08001647 	.word	0x08001647
 80015d0:	08001621 	.word	0x08001621
 80015d4:	08001633 	.word	0x08001633
 80015d8:	08001675 	.word	0x08001675
 80015dc:	0800167b 	.word	0x0800167b
 80015e0:	0800167b 	.word	0x0800167b
 80015e4:	0800167b 	.word	0x0800167b
 80015e8:	0800167b 	.word	0x0800167b
 80015ec:	0800167b 	.word	0x0800167b
 80015f0:	0800167b 	.word	0x0800167b
 80015f4:	0800167b 	.word	0x0800167b
 80015f8:	0800167b 	.word	0x0800167b
 80015fc:	0800167b 	.word	0x0800167b
 8001600:	0800167b 	.word	0x0800167b
 8001604:	0800167b 	.word	0x0800167b
 8001608:	0800167b 	.word	0x0800167b
 800160c:	0800167b 	.word	0x0800167b
 8001610:	08001629 	.word	0x08001629
 8001614:	0800163d 	.word	0x0800163d
 8001618:	4a82      	ldr	r2, [pc, #520]	; (8001824 <HAL_GPIO_Init+0x2d8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161e:	e02c      	b.n	800167a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e029      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	3304      	adds	r3, #4
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e024      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	3308      	adds	r3, #8
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e01f      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	330c      	adds	r3, #12
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e01a      	b.n	800167c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164e:	2304      	movs	r3, #4
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e013      	b.n	800167c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	611a      	str	r2, [r3, #16]
          break;
 8001666:	e009      	b.n	800167c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	615a      	str	r2, [r3, #20]
          break;
 8001672:	e003      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x130>
          break;
 800167a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d801      	bhi.n	8001686 <HAL_GPIO_Init+0x13a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	e001      	b.n	800168a <HAL_GPIO_Init+0x13e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	d802      	bhi.n	8001698 <HAL_GPIO_Init+0x14c>
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x152>
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3b08      	subs	r3, #8
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	210f      	movs	r1, #15
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	6a39      	ldr	r1, [r7, #32]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8090 	beq.w	80017ec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016cc:	4b56      	ldr	r3, [pc, #344]	; (8001828 <HAL_GPIO_Init+0x2dc>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_GPIO_Init+0x2dc>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_GPIO_Init+0x2dc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e4:	4a51      	ldr	r2, [pc, #324]	; (800182c <HAL_GPIO_Init+0x2e0>)
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a49      	ldr	r2, [pc, #292]	; (8001830 <HAL_GPIO_Init+0x2e4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1e0>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a48      	ldr	r2, [pc, #288]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1dc>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a47      	ldr	r2, [pc, #284]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1d8>
 8001720:	2302      	movs	r3, #2
 8001722:	e004      	b.n	800172e <HAL_GPIO_Init+0x1e2>
 8001724:	2303      	movs	r3, #3
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x1e2>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_GPIO_Init+0x1e2>
 800172c:	2300      	movs	r3, #0
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173e:	493b      	ldr	r1, [pc, #236]	; (800182c <HAL_GPIO_Init+0x2e0>)
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001758:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_GPIO_Init+0x2f0>)
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4937      	ldr	r1, [pc, #220]	; (800183c <HAL_GPIO_Init+0x2f0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001766:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4933      	ldr	r1, [pc, #204]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	492d      	ldr	r1, [pc, #180]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	4929      	ldr	r1, [pc, #164]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001798:	4013      	ands	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4923      	ldr	r1, [pc, #140]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	491f      	ldr	r1, [pc, #124]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4919      	ldr	r1, [pc, #100]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4915      	ldr	r1, [pc, #84]	; (800183c <HAL_GPIO_Init+0x2f0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3301      	adds	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f47f aeaf 	bne.w	8001560 <HAL_GPIO_Init+0x14>
  }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	372c      	adds	r7, #44	; 0x2c
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	10320000 	.word	0x10320000
 8001814:	10310000 	.word	0x10310000
 8001818:	10220000 	.word	0x10220000
 800181c:	10210000 	.word	0x10210000
 8001820:	10120000 	.word	0x10120000
 8001824:	10110000 	.word	0x10110000
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000
 8001830:	40010800 	.word	0x40010800
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40011000 	.word	0x40011000
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e001      	b.n	8001862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	807b      	strh	r3, [r7, #2]
 800187a:	4613      	mov	r3, r2
 800187c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187e:	787b      	ldrb	r3, [r7, #1]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800188a:	e003      	b.n	8001894 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	041a      	lsls	r2, r3, #16
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	400b      	ands	r3, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e26c      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d00c      	beq.n	8001916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fc:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d112      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
 8001908:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001914:	d10b      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06c      	beq.n	80019fc <HAL_RCC_OscConfig+0x12c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d168      	bne.n	80019fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e246      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x76>
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a7f      	ldr	r2, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e02e      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7a      	ldr	r2, [pc, #488]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a77      	ldr	r2, [pc, #476]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e01d      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0xbc>
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a71      	ldr	r2, [pc, #452]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 800198c:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a67      	ldr	r2, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fcb6 	bl	800131c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fcb2 	bl	800131c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1fa      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe4>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fca2 	bl	800131c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fc9e 	bl	800131c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1e6      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x10c>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a16:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1ba      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4939      	ldr	r1, [pc, #228]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e03a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fc57 	bl	800131c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fc53 	bl	800131c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e19b      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4927      	ldr	r1, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc36 	bl	800131c <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fc32 	bl	800131c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e17a      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03a      	beq.n	8001b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d019      	beq.n	8001b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fc16 	bl	800131c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff fc12 	bl	800131c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e15a      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 fa9a 	bl	800204c <RCC_Delay>
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fbfc 	bl	800131c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b26:	e00f      	b.n	8001b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fbf8 	bl	800131c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d908      	bls.n	8001b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e140      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42420000 	.word	0x42420000
 8001b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b9e      	ldr	r3, [pc, #632]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e9      	bne.n	8001b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a6 	beq.w	8001cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b97      	ldr	r3, [pc, #604]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a93      	ldr	r2, [pc, #588]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a8a      	ldr	r2, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fbb9 	bl	800131c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fbb5 	bl	800131c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	; 0x64
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0fd      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x312>
 8001bd4:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a7a      	ldr	r2, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x334>
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a72      	ldr	r2, [pc, #456]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	e01c      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x356>
 8001c0c:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a6c      	ldr	r2, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a69      	ldr	r2, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d015      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fb69 	bl	800131c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff fb65 	bl	800131c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0ab      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <HAL_RCC_OscConfig+0x37e>
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb53 	bl	800131c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff fb4f 	bl	800131c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e095      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8081 	beq.w	8001dba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d061      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d146      	bne.n	8001d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_RCC_OscConfig+0x4fc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fb23 	bl	800131c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fb1f 	bl	800131c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e067      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d108      	bne.n	8001d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	492d      	ldr	r1, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	430b      	orrs	r3, r1
 8001d26:	4927      	ldr	r1, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x4fc>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff faf3 	bl	800131c <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff faef 	bl	800131c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e037      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46a>
 8001d58:	e02f      	b.n	8001dba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_RCC_OscConfig+0x4fc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fadc 	bl	800131c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff fad8 	bl	800131c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e020      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x498>
 8001d86:	e018      	b.n	8001dba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e013      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	42420060 	.word	0x42420060

08001dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0d0      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4965      	ldr	r1, [pc, #404]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b8      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e2c:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	494d      	ldr	r1, [pc, #308]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d040      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d115      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e07f      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e073      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06b      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4936      	ldr	r1, [pc, #216]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7ff fa2c 	bl	800131c <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7ff fa28 	bl	800131c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e053      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d210      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4922      	ldr	r1, [pc, #136]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e032      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4916      	ldr	r1, [pc, #88]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	490e      	ldr	r1, [pc, #56]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5e:	f000 f821 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	490a      	ldr	r1, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1cc>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f98a 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	080028bc 	.word	0x080028bc
 8001f9c:	20000050 	.word	0x20000050
 8001fa0:	20000054 	.word	0x20000054

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x36>
 8001fd2:	e027      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	e027      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0c9b      	lsrs	r3, r3, #18
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4a17      	ldr	r2, [pc, #92]	; (8002040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d010      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0c5b      	lsrs	r3, r3, #17
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_RCC_GetSysClockFreq+0x98>)
 8002006:	fb02 f203 	mul.w	r2, r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	613b      	str	r3, [r7, #16]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetSysClockFreq+0x98>)
 8002026:	613b      	str	r3, [r7, #16]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	693b      	ldr	r3, [r7, #16]
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	007a1200 	.word	0x007a1200
 8002040:	080028cc 	.word	0x080028cc
 8002044:	080028dc 	.word	0x080028dc
 8002048:	003d0900 	.word	0x003d0900

0800204c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <RCC_Delay+0x34>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <RCC_Delay+0x38>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0a5b      	lsrs	r3, r3, #9
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002068:	bf00      	nop
  }
  while (Delay --);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	60fa      	str	r2, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <RCC_Delay+0x1c>
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	20000050 	.word	0x20000050
 8002084:	10624dd3 	.word	0x10624dd3

08002088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e041      	b.n	800211e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f85a 	bl	8001168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 fa56 	bl	8002578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e035      	b.n	80021ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_TIM_Base_Start_IT+0x90>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_TIM_Base_Start_IT+0x4e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d004      	beq.n	8002176 <HAL_TIM_Base_Start_IT+0x4e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_TIM_Base_Start_IT+0x94>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d111      	bne.n	800219a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d010      	beq.n	80021aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002198:	e007      	b.n	80021aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40000400 	.word	0x40000400

080021c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d020      	beq.n	8002224 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0202 	mvn.w	r2, #2
 80021f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f998 	bl	8002540 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f98b 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f99a 	bl	8002552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d020      	beq.n	8002270 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0204 	mvn.w	r2, #4
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2202      	movs	r2, #2
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f972 	bl	8002540 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f965 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f974 	bl	8002552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d020      	beq.n	80022bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0208 	mvn.w	r2, #8
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2204      	movs	r2, #4
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f94c 	bl	8002540 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f93f 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f94e 	bl	8002552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d020      	beq.n	8002308 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0210 	mvn.w	r2, #16
 80022d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2208      	movs	r2, #8
 80022de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f926 	bl	8002540 <HAL_TIM_IC_CaptureCallback>
 80022f4:	e005      	b.n	8002302 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f919 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f928 	bl	8002552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0201 	mvn.w	r2, #1
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fe8a 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa6f 	bl	800282e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8f8 	bl	8002564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0220 	mvn.w	r2, #32
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa42 	bl	800281c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIM_ConfigClockSource+0x1c>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0b4      	b.n	8002526 <HAL_TIM_ConfigClockSource+0x186>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f4:	d03e      	beq.n	8002474 <HAL_TIM_ConfigClockSource+0xd4>
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fa:	f200 8087 	bhi.w	800250c <HAL_TIM_ConfigClockSource+0x16c>
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	f000 8086 	beq.w	8002512 <HAL_TIM_ConfigClockSource+0x172>
 8002406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240a:	d87f      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800240c:	2b70      	cmp	r3, #112	; 0x70
 800240e:	d01a      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xa6>
 8002410:	2b70      	cmp	r3, #112	; 0x70
 8002412:	d87b      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 8002414:	2b60      	cmp	r3, #96	; 0x60
 8002416:	d050      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x11a>
 8002418:	2b60      	cmp	r3, #96	; 0x60
 800241a:	d877      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800241c:	2b50      	cmp	r3, #80	; 0x50
 800241e:	d03c      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xfa>
 8002420:	2b50      	cmp	r3, #80	; 0x50
 8002422:	d873      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d058      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x13a>
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d86f      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b30      	cmp	r3, #48	; 0x30
 800242e:	d064      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002430:	2b30      	cmp	r3, #48	; 0x30
 8002432:	d86b      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b20      	cmp	r3, #32
 8002436:	d060      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002438:	2b20      	cmp	r3, #32
 800243a:	d867      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05c      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002440:	2b10      	cmp	r3, #16
 8002442:	d05a      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	e062      	b.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f000 f96a 	bl	800272e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	609a      	str	r2, [r3, #8]
      break;
 8002472:	e04f      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f000 f953 	bl	800272e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002496:	609a      	str	r2, [r3, #8]
      break;
 8002498:	e03c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f000 f8ca 	bl	8002640 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2150      	movs	r1, #80	; 0x50
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f921 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 80024b8:	e02c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f000 f8e8 	bl	800269c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2160      	movs	r1, #96	; 0x60
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f911 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 80024d8:	e01c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f000 f8aa 	bl	8002640 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2140      	movs	r1, #64	; 0x40
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f901 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 80024f8:	e00c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f000 f8f8 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 800250a:	e003      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      break;
 8002510:	e000      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <TIM_Base_SetConfig+0xc0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <TIM_Base_SetConfig+0x28>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002596:	d003      	beq.n	80025a0 <TIM_Base_SetConfig+0x28>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <TIM_Base_SetConfig+0xc4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d108      	bne.n	80025b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <TIM_Base_SetConfig+0xc0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <TIM_Base_SetConfig+0x52>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d003      	beq.n	80025ca <TIM_Base_SetConfig+0x52>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <TIM_Base_SetConfig+0xc4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d108      	bne.n	80025dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <TIM_Base_SetConfig+0xc0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f023 0201 	bic.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]
  }
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400

08002640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0201 	bic.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800266a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 030a 	bic.w	r3, r3, #10
 800267c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f023 0210 	bic.w	r2, r3, #16
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	031b      	lsls	r3, r3, #12
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	f043 0307 	orr.w	r3, r3, #7
 800271c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002748:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4313      	orrs	r3, r2
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	609a      	str	r2, [r3, #8]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002780:	2302      	movs	r3, #2
 8002782:	e041      	b.n	8002808 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d004      	beq.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10c      	bne.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400

0800281c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2600      	movs	r6, #0
 8002844:	4d0c      	ldr	r5, [pc, #48]	; (8002878 <__libc_init_array+0x38>)
 8002846:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002848:	1b64      	subs	r4, r4, r5
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	f000 f822 	bl	8002898 <_init>
 8002854:	2600      	movs	r6, #0
 8002856:	4d0a      	ldr	r5, [pc, #40]	; (8002880 <__libc_init_array+0x40>)
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <__libc_init_array+0x44>)
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f855 3b04 	ldr.w	r3, [r5], #4
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	080028e0 	.word	0x080028e0
 800287c:	080028e0 	.word	0x080028e0
 8002880:	080028e0 	.word	0x080028e0
 8002884:	080028e4 	.word	0x080028e4

08002888 <memset>:
 8002888:	4603      	mov	r3, r0
 800288a:	4402      	add	r2, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
